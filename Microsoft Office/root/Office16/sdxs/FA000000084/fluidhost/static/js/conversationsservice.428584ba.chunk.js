"use strict";(self.webpackChunkfluidhost=self.webpackChunkfluidhost||[]).push([[71398],{94266:(e,t,o)=>{o.d(t,{R:()=>a});var r=o(45078);class a{appendSharepointAuthenticationChallengeHeaders(e){return e[r.Er.AuthenticationChallengeHeaderName]=r.Er.AuthenticationChallengeHeaderValue,e}getDefaultRequestTelemetryConfig(e){return{apiName:this.name,methodName:e,requestHeadersToLog:this.loggableRequestHeaders,responseHeadersToLog:this.loggableResponseHeaders}}extractSkipTokenFromNextLink(e){try{const t=new URL(e);return new URLSearchParams(t.search).get(this.skipTokenParam)}catch{return null}}constructor(e,t,o){this.name=e,this.hostDomain=t,this.ajaxClient=o,this.skipTokenKey="@odata.nextLink",this.skipTokenParam="$skiptoken",this.vBetaUrlToken="beta",this.v1UrlToken="v1.0",this.loggableRequestHeaders=[r.a8.ClientRequestId],this.loggableResponseHeaders=[r.Qu.RequestId,r.Qu.ClientRequestId,r.Qu.TCorrelationId]}}},45622:(e,t,o)=>{o.r(t),o.d(t,{ConversationsService:()=>d});var r=o(95783),a=o(45078),n=o(11910),s=o(94266),i=o(33411),c=o.n(i),h=o(86178),l=o.n(h),u=o(98502);class d extends s.R{async getGroupConversationThreadAsync(e){const t="".concat(this.hostDomain,"/").concat(this.v1UrlToken,"/groups/").concat(e.groupId,"/threads/").concat(e.threadId,"/posts"),o=await this.ajaxClient.executeRequest(t,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getGroupConversationThreadAsync")});try{const t=await o.clone().json();if(null==t)throw new Error("No conversation thread data returned");const r=t.value;return c()(r,(t=>n.L.builder.fromGraphPostResource(t,e.threadId).build()))}catch(r){throw u.g.generateAjaxClientError(o,r)}}async createGroupConversationThreadAsync(e){const t="".concat(this.hostDomain,"/").concat(this.v1UrlToken,"/groups/").concat(e.groupId,"/conversations"),o=e.newPost.toGraphSerializable(),s={topic:e.threadSubject.substring(0,200),threads:[{posts:[o]}]},i=await this.ajaxClient.executeRequest(t,{method:r.PJ.Post,body:JSON.stringify(s),headers:{[a.Lr.ContentType]:a.Mq.Json},telemetryConfig:this.getDefaultRequestTelemetryConfig("createGroupConversationThreadAsync")});try{var c;const e=await i.clone().json();if(null==(null===e||void 0===e||null===(c=e.threads)||void 0===c||null===(c=c[0])||void 0===c?void 0:c.id))throw new Error("No post response returned");return o.createdDateTime=l()().toDate().toISOString(),n.L.builder.fromGraphPostResource(o,e.threads[0].id).withLocallyUniqueId().build()}catch(h){throw u.g.generateAjaxClientError(i,h)}}async postReplyInGroupConversationThreadAsync(e){const t="".concat(this.hostDomain,"/").concat(this.v1UrlToken,"/groups/").concat(e.groupId,"/threads/").concat(e.threadId,"/reply"),o=e.newPost.toGraphSerializable();o.createdDateTime=l()().toDate().toISOString(),o.from=void 0,o.categories=void 0;const n={post:o};await this.ajaxClient.executeRequest(t,{method:r.PJ.Post,headers:{[a.Lr.ContentType]:a.Mq.Json},body:JSON.stringify(n),telemetryConfig:this.getDefaultRequestTelemetryConfig("postReplyInGroupConversationThreadAsync")})}constructor(e,t){super("ConversationsService",e,t)}}}}]);
//# sourceMappingURL=conversationsservice.428584ba.chunk.js.map