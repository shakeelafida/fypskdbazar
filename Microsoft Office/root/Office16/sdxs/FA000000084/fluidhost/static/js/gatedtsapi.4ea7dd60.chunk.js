"use strict";(self.webpackChunkfluidhost=self.webpackChunkfluidhost||[]).push([[19411],{13892:(e,t,s)=>{s.r(t),s.d(t,{GatedTaskServiceApi:()=>j});var r=s(39287);class i extends r.k{updateRequestParams(e,t){this.requestParams.taskId=t,this.entityId=i.RequestPrefix+t}constructor(e,t,s,r,n){super(i.RequestPrefix+e,t,s,r,n)}}i.RequestPrefix="GET_TASK_ENTITY_SET";var n=s(43649);class a extends n.b{updateRequestParams(e,t){this.requestParams.bucketId=t,this.entityId=a.RequestPrefix+t}constructor(e,t,s,r,i){super(a.RequestPrefix+e,t,s,r,i)}}a.RequestPrefix="DELETE_BUCKET";class u extends n.b{updateRequestParams(e,t){this.requestParams.planId=t,this.entityId=u.RequestPrefix+t}constructor(e,t,s,r,i){super(u.RequestPrefix+e,t,s,r,i)}}u.RequestPrefix="DELETE_PLAN";class o extends n.b{updateRequestParams(e,t){this.requestParams.groupId=t,this.entityId=o.RequestPrefix+t}constructor(e,t,s,r,i){super(o.RequestPrefix+e,t,s,r,i)}}o.RequestPrefix="DELETE_GROUP";class c extends n.b{updateRequestParams(e,t){this.requestParams.taskId=t,this.entityId=c.RequestPrefix+t}constructor(e,t,s,r,i){super(c.RequestPrefix+e,t,s,r,i)}}c.RequestPrefix="DELETE_TASK";var l=s(88636);class d extends l.E{extractNewEntityId(e){return e.id}constructor(e,t,s,r,i){super(d.RequestPrefix+e,t,s,r,i)}}d.RequestPrefix="CREATE_GROUP";var P=s(92970),p=s(87596);class h extends p.x{updateRequestParams(e,t){this.entityId=h.RequestPrefix+t;const s=this.requestParams.originalGroup.toWebSerializable();s.Id=t,this.requestParams.originalGroup=P.E.builder.fromUnifiedGroupResource(s).build();const r=this.requestParams.updatedGroup.toWebSerializable();r.Id=t,this.requestParams.updatedGroup=P.E.builder.fromUnifiedGroupResource(r).build()}constructor(e,t,s,r,i){super(h.RequestPrefix+e,t,s,r,i)}}h.RequestPrefix="UPDATE_UNIFIED_GROUP";class R extends p.x{updateRequestParams(e,t){this.entityId=R.RequestPrefix+t,this.requestParams.groupId=t}constructor(e,t,s,r,i){super(R.RequestPrefix+e,t,s,r,i)}}R.RequestPrefix="UPDATE_GROUP_FAVORITE";class q extends p.x{updateRequestParams(e,t){this.entityId=q.RequestPrefix+t,this.requestParams.groupId=t}constructor(e,t,s,r,i){super(q.RequestPrefix+e,t,s,r,i)}}q.RequestPrefix="UPDATE_GROUP_SUBSCRIPTION";class A extends p.x{updateRequestParams(e,t){this.entityId=A.RequestPrefix+t,this.requestParams.groupId=t}constructor(e,t,s,r,i){super(A.RequestPrefix+e,t,s,r,i)}}A.RequestPrefix="JOIN_GROUP";class v extends p.x{updateRequestParams(e,t){this.entityId=v.RequestPrefix+t,this.requestParams.groupId=t}constructor(e,t,s,r,i){super(v.RequestPrefix+e,t,s,r,i)}}v.RequestPrefix="LEAVE_GROUP";class k extends l.E{extractNewEntityId(e){return e.plan.id}constructor(e,t,s,r,i){super(k.RequestPrefix+e,t,s,r,i)}}k.RequestPrefix="CREATE_PLAN";var S=s(40468);class y extends p.x{updateRequestParams(e,t){this.entityId=y.RequestPrefix+t;const s=this.requestParams.originalPlanEntitySet.toWebSerializable(),r=this.requestParams.updatedPlanEntitySet.toWebSerializable();null!=s.Plan&&(s.Plan.Id=t),null!=r.Plan&&(r.Plan.Id=t),null!=s.Details&&(s.Details.Id=t),null!=r.Details&&(r.Details.Id=t),this.requestParams.originalPlanEntitySet=S.T.builder.fromPlanEntityGroupResource(s).build(),this.requestParams.updatedPlanEntitySet=S.T.builder.fromPlanEntityGroupResource(r).build()}constructor(e,t,s,r,i){super(y.RequestPrefix+e,t,s,r,i)}}y.RequestPrefix="UPDATE_PLAN";class E extends p.x{updateRequestParams(e,t){this.entityId=E.RequestPrefix+t,this.requestParams.planId=t}constructor(e,t,s,r,i){super(E.RequestPrefix+e,t,s,r,i)}}E.RequestPrefix="COPY_PLAN";class m extends l.E{extractNewEntityId(e){return e.id}constructor(e,t,s,r,i){super(m.RequestPrefix+e,t,s,r,i)}}m.RequestPrefix="CREATE_BUCKET";var T=s(8403);class I extends p.x{updateRequestParams(e,t){this.entityId=I.RequestPrefix+t;const s=this.requestParams.originalBucket.toWebSerializable();s.Id=t,this.requestParams.originalBucket=T.f.builder.fromWebResource(s).build();const r=this.requestParams.updatedBucket.toWebSerializable();r.Id=t,this.requestParams.updatedBucket=T.f.builder.fromWebResource(r).build()}constructor(e,t,s,r,i){super(I.RequestPrefix+e,t,s,r,i)}}I.RequestPrefix="UPDATE_BUCKET";var w=s(80708);class x extends l.E{extractNewEntityId(e){return e.id}updateRequestParams(e,t){0!==e.indexOf(m.RequestPrefix)?0!==e.indexOf(k.RequestPrefix)?super.updateRequestParams(e,t):this.updatePlanIdOnRequestParameters(t):this.updateBucketIdOnRequestParameters(t)}updatePlanIdOnRequestParameters(e){const{newTaskEntitySet:t}=this.requestParams;this.requestParams.newTaskEntitySet=w.F.builder.withTask(t.task.setProperty("planId",e)).withDetails(t.taskDetails).withFormatData(t.taskFormatData).build()}updateBucketIdOnRequestParameters(e){const{newTaskEntitySet:t}=this.requestParams;this.requestParams.newTaskEntitySet=w.F.builder.withTask(t.task.setProperty("bucketId",e)).withDetails(t.taskDetails).withFormatData(t.taskFormatData).build()}constructor(e,t,s,r,i){super(x.RequestPrefix+e,t,s,r,i)}}x.RequestPrefix="CREATE_TASK";class _ extends p.x{updateRequestParams(e,t){if(0===e.indexOf(m.RequestPrefix))return void this.updateBucketIdOnRequestParameters(t);if(0===e.indexOf(k.RequestPrefix))return void this.updatePlanIdOnRequestParameters(t);this.entityId=_.RequestPrefix+t;const s=this.requestParams.originalTaskEntitySet.toWebSerializable(),r=this.requestParams.updatedTaskEntitySet.toWebSerializable();null!=s.Task&&(s.Task.Id=t),null!=r.Task&&(r.Task.Id=t),null!=s.Details&&(s.Details.Id=t),null!=r.Details&&(r.Details.Id=t),null!=s.AssignedToTaskBoardFormat&&(s.AssignedToTaskBoardFormat.Id=t),null!=r.AssignedToTaskBoardFormat&&(r.AssignedToTaskBoardFormat.Id=t),null!=s.BucketTaskBoardFormat&&(s.BucketTaskBoardFormat.Id=t),null!=r.BucketTaskBoardFormat&&(r.BucketTaskBoardFormat.Id=t),null!=s.ProgressTaskBoardFormat&&(s.ProgressTaskBoardFormat.Id=t),null!=r.ProgressTaskBoardFormat&&(r.ProgressTaskBoardFormat.Id=t),this.requestParams.originalTaskEntitySet=w.F.builder.fromWebResource(s).build(),this.requestParams.updatedTaskEntitySet=w.F.builder.fromWebResource(r).build()}updatePlanIdOnRequestParameters(e){const{updatedTaskEntitySet:t}=this.requestParams;null!=t.task&&(this.requestParams.updatedTaskEntitySet=w.F.builder.withTask(t.task.setProperty("planId",e)).withDetails(t.taskDetails).withFormatData(t.taskFormatData).build())}updateBucketIdOnRequestParameters(e){const{updatedTaskEntitySet:t}=this.requestParams;null!=t.task&&(this.requestParams.updatedTaskEntitySet=w.F.builder.withTask(t.task.setProperty("bucketId",e)).withDetails(t.taskDetails).withFormatData(t.taskFormatData).build())}constructor(e,t,s,r,i){super(_.RequestPrefix+e,t,s,r,i)}}_.RequestPrefix="UPDATE_TASK";var b=s(94078);class f extends p.x{updateRequestParams(e,t){this.entityId=f.RequestPrefix+t;const s=this.requestParams.originalUserDetails.toWebSerializable();s.Id=t,this.requestParams.originalUserDetails=b.I.builder.fromWebResource(s).build();const r=this.requestParams.updatedUserDetails.toWebSerializable();r.Id=t,this.requestParams.updatedUserDetails=b.I.builder.fromWebResource(r).build()}constructor(e,t,s,r,i){super(f.RequestPrefix+e,t,s,r,i)}}f.RequestPrefix="UPDATE_USER_DETAILS";class g extends p.x{updateRequestParams(e,t){this.requestParams.taskId=t,this.entityId=g.RequestPrefix+t}constructor(e,t,s,r,i){super(g.RequestPrefix+e,t,s,r,i)}}g.RequestPrefix="UNDELETE_TASK";var C=s(18113);class U extends l.E{extractNewEntityId(e){return e.externalId}constructor(e,t,s,r,i){let{resolve:n,reject:a}=r;super(U.RequestPrefix+e,t,s,{resolve:n,reject:a},i)}}U.RequestPrefix="CREATE_PLANNER_ROSTER";var N=s(19853),G=s.n(N),O=s(98502),D=s(91246);class j{getAugmentationLoopToken(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((e,t)=>{const i=new r.k("GET_AUGMENTATIONLOOP_TOKEN",this.taskServiceApi.getAugmentationLoopToken.bind(this.taskServiceApi),{},{resolve:e,reject:t},[]);this.requestPrioritizer.handleRequest(i,s,this.duplicateRequestsComparator,this.duplicateRequestHandler)}))}getUnifiedGroupSensitivityLabelAsync(e,t,s,i){const n=null==i?C.Q.Priority1:i;return new Promise(((i,a)=>{const u=new r.k("GET_UNIFIED_GROUP_SENSITIVITY_LABEL"+e.groupId,this.taskServiceApi.getUnifiedGroupSensitivityLabelAsync.bind(this.taskServiceApi),e,{resolve:i,reject:a},[]);this.requestPrioritizer.handleRequest(u,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,s)}))}getRosterContainerAsync(e,t,s,i){const n=null==i?C.Q.Priority1:i;return new Promise(((i,a)=>{const u=new r.k("GET_ROSTER_CONTAINER"+e.containerId,this.taskServiceApi.getRosterContainerAsync.bind(this.taskServiceApi),e,{resolve:i,reject:a},[]);this.requestPrioritizer.handleRequest(u,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,s)}))}getUnifiedGroupDetailsAsync(e,t,s,i){const n=null==i?C.Q.Priority5:i;return new Promise(((i,a)=>{const u=new r.k("GET_UNIFIED_GROUP_DETAILS"+e.groupId,this.taskServiceApi.getUnifiedGroupDetailsAsync.bind(this.taskServiceApi),e,{resolve:i,reject:a},[]);this.requestPrioritizer.handleRequest(u,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,s)}))}getJoinedGroupsAsync(e,t){const s=null==t?C.Q.Priority5:t;return new Promise(((t,i)=>{const n=new r.k("GET_JOINED_GROUPS",this.taskServiceApi.getJoinedGroupsAsync.bind(this.taskServiceApi),e,{resolve:t,reject:i},[]);this.requestPrioritizer.handleRequest(n,s,this.duplicateRequestsComparator,this.duplicateRequestHandler)}))}getFavoritePlansForUserAsync(e,t,s,i){const n=null==i?C.Q.Priority5:i;return new Promise(((i,a)=>{const u=new r.k("GET_FAVORITE_PLANS_FOR_USER",this.taskServiceApi.getFavoritePlansForUserAsync.bind(this.taskServiceApi),e,{resolve:i,reject:a},[]);this.requestPrioritizer.handleRequest(u,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,s)}))}getRecentPlansForUserAsync(e,t,s,i){const n=null==i?C.Q.Priority5:i;return new Promise(((i,a)=>{const u=new r.k("GET_RECENT_PLANS_FOR_USER",this.taskServiceApi.getRecentPlansForUserAsync.bind(this.taskServiceApi),e,{resolve:i,reject:a},[]);this.requestPrioritizer.handleRequest(u,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,s)}))}getRecommendedDocumentPlansForUserAsync(e,t,s,i){const n=null==i?C.Q.Priority5:i;return new Promise(((t,s)=>{const i=new r.k("GET_RECOMMENDED_DOCUMENT_PLANS_FOR_USER",this.taskServiceApi.getRecommendedDocumentPlansForUserAsync.bind(this.taskServiceApi),e,{resolve:t,reject:s},[]);this.requestPrioritizer.handleRequest(i,n,this.duplicateRequestsComparator,this.duplicateRequestHandler)}))}getAllDocumentPlansForUserAsync(e,t,s,i){const n=null==i?C.Q.Priority5:i;return new Promise(((t,s)=>{const i=new r.k("GET_ALL_DOCUMENT_PLANS_FOR_USER",this.taskServiceApi.getAllDocumentPlansForUserAsync.bind(this.taskServiceApi),e,{resolve:t,reject:s},[]);this.requestPrioritizer.handleRequest(i,n,this.duplicateRequestsComparator,this.duplicateRequestHandler)}))}getContainersAsync(e,t,s,i){const n=null==i?C.Q.Priority5:i;return new Promise(((i,a)=>{const u=new r.k("GET_CONTAINERS_OF_CONTAINER_TYPE"+e.containerType,this.taskServiceApi.getContainersAsync.bind(this.taskServiceApi),e,{resolve:i,reject:a},[]);this.requestPrioritizer.handleRequest(u,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,s)}))}getPlansForGroupAsync(e,t){const s=null==t?C.Q.Priority5:t;return new Promise(((t,i)=>{const n=new r.k("GET_PLANS_FOR_GROUP"+e.groupId,this.taskServiceApi.getPlansForGroupAsync.bind(this.taskServiceApi),e,{resolve:t,reject:i},[]);this.requestPrioritizer.handleRequest(n,s,this.duplicateRequestsComparator,this.duplicateRequestHandler)}))}resolveGroupsToPlansBatchedAsync(e,t,s){const i=O.g.validateAjaxClientRequestParameters(e,["groupIds"]);if(null!==i)return Promise.reject(i);const n=null==s?C.Q.Priority5:s;return new Promise(((t,s)=>{const i=new r.k("RESOLVE_GROUPS_TO_PLANS_BATCHED",this.taskServiceApi.resolveGroupsToPlansBatchedAsync.bind(this.taskServiceApi),e,{resolve:t,reject:s},[]);this.requestPrioritizer.handleRequest(i,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,void 0)}))}resolveContainerIdsToPlansBatchedAsync(e,t,s,i){const n=O.g.validateAjaxClientRequestParameters(e,["containerIds"]);if(null!==n)return Promise.reject(n);const a=null==i?C.Q.Priority5:i;return new Promise(((i,n)=>{const u=new r.k("RESOLVE_CONTAINERS_TO_PLANS_BATCHED",this.taskServiceApi.resolveContainerIdsToPlansBatchedAsync.bind(this.taskServiceApi),e,{resolve:i,reject:n},[]);this.requestPrioritizer.handleRequest(u,a,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,s)}))}getPlanEntitySetAsync(e,t,s,i){const n=O.g.validateAjaxClientRequestParameters(e,["planId"]);if(null!==n)return Promise.reject(n);const a=null==i?C.Q.Priority5:i;return new Promise(((i,n)=>{const u=new r.k("GET_PLAN_ENTITYSET"+e.planId,this.taskServiceApi.getPlanEntitySetAsync.bind(this.taskServiceApi),e,{resolve:i,reject:n},[]);this.requestPrioritizer.handleRequest(u,a,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,s)}))}getPlanEntitySetByExternalIdAsync(e,t,s,i){const n=O.g.validateAjaxClientRequestParameters(e,["contextScenarioId","externalObjectId"]);if(null!==n)return Promise.reject(n);const a=null==i?C.Q.Priority5:i;return new Promise(((i,n)=>{const u=new r.k("GET_PLAN_ENTITYSET_EXTERNALID-S-".concat(e.contextScenarioId,"-I-").concat(e.externalObjectId),this.taskServiceApi.getPlanEntitySetByExternalIdAsync.bind(this.taskServiceApi),e,{resolve:i,reject:n},[]);this.requestPrioritizer.handleRequest(u,a,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,s)}))}getTaskEntitySetAsync(e,t,s,r){const n=null==r?C.Q.Priority5:r;return new Promise(((r,a)=>{const u=new i(e.taskId,this.taskServiceApi.getTaskEntitySetAsync.bind(this.taskServiceApi),e,{resolve:r,reject:a},[]);this.requestPrioritizer.handleRequest(u,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,s)}))}getTasksForPlanAsync(e,t,s,i){const n=null==i?C.Q.Priority5:i;return new Promise(((i,a)=>{const u=new r.k("GET_TASKS_FOR_PLAN"+e.planId,this.taskServiceApi.getTasksForPlanAsync.bind(this.taskServiceApi),e,{resolve:i,reject:a},[]);this.requestPrioritizer.handleRequest(u,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,s)}))}getTasksAssignedToCurrentUserAsync(e,t,s){const i=null==s?C.Q.Priority5:s;return new Promise(((s,n)=>{const a=new r.k("GET_TASKS_ASSIGNED_CURRENT_USER",this.taskServiceApi.getTasksAssignedToCurrentUserAsync.bind(this.taskServiceApi),e,{resolve:s,reject:n},[]);this.requestPrioritizer.handleRequest(a,i,this.duplicateRequestsComparator,this.duplicateRequestHandler,void 0,t)}))}getBucketAsync(e,t,s,i){const n=null==i?C.Q.Priority5:i;return new Promise(((i,a)=>{const u=new r.k("GET_BUCKET"+e.bucketId,this.taskServiceApi.getBucketAsync.bind(this.taskServiceApi),e,{resolve:i,reject:a},[]);this.requestPrioritizer.handleRequest(u,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,s)}))}getBucketsForPlanAsync(e,t,s,i){const n=null==i?C.Q.Priority5:i;return new Promise(((i,a)=>{const u=new r.k("GET_BUCKETS_IN_PLAN"+e.planId,this.taskServiceApi.getBucketsForPlanAsync.bind(this.taskServiceApi),e,{resolve:i,reject:a},[]);this.requestPrioritizer.handleRequest(u,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,s)}))}getCurrentUserDetailsAsync(e,t,s,i){const n=null==i?C.Q.Priority5:i;return new Promise(((i,a)=>{const u=new r.k("GET_CURRENT_USER_DETAILS",this.taskServiceApi.getCurrentUserDetailsAsync.bind(this.taskServiceApi),e,{resolve:i,reject:a},[]);this.requestPrioritizer.handleRequest(u,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,s)}))}getDiffSyncTokenAsync(e,t){const s=null==t?C.Q.Priority10:t;return new Promise(((e,t)=>{const i=new r.k("GET_DIFF_SYNC_TOKEN",this.taskServiceApi.getDiffSyncTokenAsync.bind(this.taskServiceApi),void 0,{resolve:e,reject:t},[]);this.requestPrioritizer.handleRequest(i,s,this.duplicateRequestsComparator,this.duplicateRequestHandler)}))}getDiffSyncFeedAsync(e,t){const s=null==t?C.Q.Priority10:t;return new Promise(((t,i)=>{const n=new r.k("GET_DIFF_SYNC_FEED"+e.diffSyncToken,this.taskServiceApi.getDiffSyncFeedAsync.bind(this.taskServiceApi),e,{resolve:t,reject:i},[]);this.requestPrioritizer.handleRequest(n,s,this.duplicateRequestsComparator,this.duplicateRequestHandler)}))}getFilteredTenantUsersByKeyword(e,t){const s=O.g.validateAjaxClientRequestParameters(e,["keyword"]);if(null!==s)return Promise.reject(s);const i=null==t?C.Q.Priority1:t;return new Promise(((t,s)=>{const n=new r.k("FILTERED_TENANT_USERS_BY_KEYWORD",this.taskServiceApi.getFilteredTenantUsersByKeyword.bind(this.taskServiceApi),e,{resolve:t,reject:s},[]);this.requestPrioritizer.handleRequest(n,i,((e,t)=>e.entityId===t.entityId),((e,t)=>{const s=e.primaryRequest;return e.primaryRequest=t.primaryRequest,e.duplicateRequests.push(s),e}))}))}getSuiteNav(e,t){const s=null==t?C.Q.Priority5:t;return new Promise(((t,i)=>{const n=new r.k("GET_SUITE_NAV"+e.culture,this.taskServiceApi.getSuiteNav.bind(this.taskServiceApi),e,{resolve:t,reject:i},[]);this.requestPrioritizer.handleRequest(n,s,this.duplicateRequestsComparator,this.duplicateRequestHandler)}))}getLicensesForUser(e,t,s,i){const n=null==i?C.Q.Priority5:i;return new Promise(((i,a)=>{const u=new r.k("GET_LICENSES_FOR_USER"+e.userId,this.taskServiceApi.getLicensesForUser.bind(this.taskServiceApi),e,{resolve:i,reject:a},[]);this.requestPrioritizer.handleRequest(u,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,s)}))}getTenantGroupSettingsAsync(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((e,t)=>{const i=new r.k("GET_TENANT_GROUP_SETTINGS",this.taskServiceApi.getTenantGroupSettingsAsync.bind(this.taskServiceApi),void 0,{resolve:e,reject:t},[]);this.requestPrioritizer.handleRequest(i,s,this.duplicateRequestsComparator,this.duplicateRequestHandler)}))}getSensitivityLabelsAsync(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((e,t)=>{const i=new r.k("GET_SENSITIVITY_LABELS",this.taskServiceApi.getSensitivityLabelsAsync.bind(this.taskServiceApi),void 0,{resolve:e,reject:t},[]);this.requestPrioritizer.handleRequest(i,s,this.duplicateRequestsComparator,this.duplicateRequestHandler)}))}getSensitivityPolicySettingsAsync(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((e,t)=>{const i=new r.k("GET_SENSITIVITY_POLICY_SETTINGS",this.taskServiceApi.getSensitivityPolicySettingsAsync.bind(this.taskServiceApi),void 0,{resolve:e,reject:t},[]);this.requestPrioritizer.handleRequest(i,s,this.duplicateRequestsComparator,this.duplicateRequestHandler)}))}getLatestBuild(e,t){const s=null==t?C.Q.Priority10:t;return new Promise(((t,i)=>{const n=new r.k("GET_LATEST_BUILD",this.taskServiceApi.getLatestBuild.bind(this.taskServiceApi),e,{resolve:t,reject:i},[]);this.requestPrioritizer.handleRequest(n,s,this.duplicateRequestsComparator,this.duplicateRequestHandler)}))}getMobileAppLinkViaCurrentUserEmailAsync(e,t){const s=null==t?C.Q.Priority5:t;return new Promise(((t,i)=>{const n=new r.k("GET_MOBILE_APP_LINK_VIA_CURRENT_USER_EMAIL",this.taskServiceApi.getMobileAppLinkViaCurrentUserEmailAsync.bind(this.taskServiceApi),e,{resolve:t,reject:i},[]);this.requestPrioritizer.handleRequest(n,s,this.duplicateRequestsComparator,this.duplicateRequestHandler)}))}getOperationStatusAsync(e,t){const s=null==t?C.Q.Priority5:t;return new Promise(((t,i)=>{const n=new r.k("GET_OPERATION_STATUS",this.taskServiceApi.getOperationStatusAsync.bind(this.taskServiceApi),e,{resolve:t,reject:i},[]);this.requestPrioritizer.handleRequest(n,s,this.duplicateRequestsComparator,this.duplicateRequestHandler)}))}getContainerPermissionsAsync(e,t){const s=null==t?C.Q.Priority5:t;return new Promise(((t,i)=>{const n=new r.k("GET_CONTAINER_PERMISSIONS",this.taskServiceApi.getContainerPermissionsAsync.bind(this.taskServiceApi),e,{resolve:t,reject:i},[]);this.requestPrioritizer.handleRequest(n,s,this.duplicateRequestsComparator,this.duplicateRequestHandler)}))}getTaskPermissionsAsync(e,t){const s=null==t?C.Q.Priority5:t;return new Promise(((t,i)=>{const n=new r.k("GET_TASK_PERMISSIONS",this.taskServiceApi.getTaskPermissionsAsync.bind(this.taskServiceApi),e,{resolve:t,reject:i},[]);this.requestPrioritizer.handleRequest(n,s,this.duplicateRequestsComparator,this.duplicateRequestHandler)}))}getUserRosterPlansAsync(e,t,s,i){const n=null==i?C.Q.Priority5:i;return new Promise(((i,a)=>{const u=new r.k("GET_USER_ROSTER_PLANS",this.taskServiceApi.getUserRosterPlansAsync.bind(this.taskServiceApi),e,{resolve:i,reject:a},[]);this.requestPrioritizer.handleRequest(u,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,s)}))}getFormResponseAsync(e,t){const s=null==t?C.Q.Priority5:t;return new Promise(((t,i)=>{const n=new r.k("GET_FORM_RESPONSE",this.taskServiceApi.getFormResponseAsync.bind(this.taskServiceApi),e,{resolve:t,reject:i},[]);this.requestPrioritizer.handleRequest(n,s,this.duplicateRequestsComparator,this.duplicateRequestHandler)}))}getApprovalDetailsAsync(e,t){const s=null==t?C.Q.Priority5:t;return new Promise(((t,i)=>{const n=new r.k("GET_APPROVAL_DETAILS",this.taskServiceApi.getApprovalDetailsAsync.bind(this.taskServiceApi),e,{resolve:t,reject:i},[]);this.requestPrioritizer.handleRequest(n,s)}))}deleteBucketAsync(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new a(e.bucketId,this.taskServiceApi.deleteBucketAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}deletePlanAsync(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new u(e.planId,this.taskServiceApi.deletePlanAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}deleteUnifiedGroupAsync(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new o(e.groupId,this.taskServiceApi.deleteUnifiedGroupAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}deleteTaskAsync(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new c(e.taskId,this.taskServiceApi.deleteTaskAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}cancelUploadSession(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new n.b("CANCEL_UPLOAD"+e.uploadSession.id,this.taskServiceApi.cancelUploadSession.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}cancelApproval(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new n.b("CANCEL_APPROVAL",this.taskServiceApi.cancelApproval.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}createPlannerRosterAsync(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new U("CREATE_PLANNER_ROSTER",this.taskServiceApi.createPlannerRosterAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}createGroupAsync(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new d(e.unifiedGroupInfo.id,this.taskServiceApi.createGroupAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[h.RequestPrefix+e.unifiedGroupInfo.id,o.RequestPrefix+e.unifiedGroupInfo.id,R.RequestPrefix+e.unifiedGroupInfo.id,q.RequestPrefix+e.unifiedGroupInfo.id,A.RequestPrefix+e.unifiedGroupInfo.id,v.RequestPrefix+e.unifiedGroupInfo.id]);this.requestPrioritizer.handleRequest(i,s)}))}createPlanAsync(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new k(e.newPlanEntitySet.id,this.taskServiceApi.createPlanAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[u.RequestPrefix+e.newPlanEntitySet.id,y.RequestPrefix+e.newPlanEntitySet.id]);this.requestPrioritizer.handleRequest(i,s)}))}createApproval(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new l.E("CREATE_APPROVAL",this.taskServiceApi.createApproval.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}updateApproval(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new p.x("UPDATE_APPROVAL",this.taskServiceApi.updateApproval.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}copyPlanAsync(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new E(e.planId,((e,t)=>this.taskServiceApi.copyPlanAsync(e,t)),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}createBucketAsync(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new m(e.bucketInfo.id,this.taskServiceApi.createBucketAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[I.RequestPrefix+e.bucketInfo.id,a.RequestPrefix+e.bucketInfo.id]);this.requestPrioritizer.handleRequest(i,s)}))}createTaskAsync(e,t){var s,r;const n=null==t?C.Q.Priority1:t,a=[_.RequestPrefix+e.newTaskEntitySet.id,c.RequestPrefix+e.newTaskEntitySet.id,i.RequestPrefix+e.newTaskEntitySet.id],u=null!==(s=e.newTaskEntitySet.task.bucketId)&&void 0!==s?s:"";D.o.isPlexTempId(u)&&a.push(m.RequestPrefix+u);const o=null!==(r=e.newTaskEntitySet.task.planId)&&void 0!==r?r:"";return D.o.isPlexTempId(o)&&a.push(k.RequestPrefix+o),new Promise(((t,s)=>{const r=new x(e.newTaskEntitySet.id,this.taskServiceApi.createTaskAsync.bind(this.taskServiceApi),e,{resolve:t,reject:s},a);this.requestPrioritizer.handleRequest(r,n)}))}updateBucketAsync(e,t,s){const r=null==s?C.Q.Priority1:s;return new Promise(((s,i)=>{const n=new I(e.originalBucket.id,this.taskServiceApi.updateBucketAsync.bind(this.taskServiceApi),e,{resolve:s,reject:i},[I.RequestPrefix+e.originalBucket.id,a.RequestPrefix+e.originalBucket.id]);this.requestPrioritizer.handleRequest(n,r,void 0,void 0,void 0,void 0,t)}))}updatePlanAsync(e,t,s){const r=null==s?C.Q.Priority1:s,i=e.originalPlanEntitySet.id&&"";return new Promise(((s,n)=>{const a=new y(i,this.taskServiceApi.updatePlanAsync.bind(this.taskServiceApi),e,{resolve:s,reject:n},[y.RequestPrefix+i,u.RequestPrefix+i]);this.requestPrioritizer.handleRequest(a,r,void 0,void 0,void 0,void 0,t)}))}updateTaskAsync(e,t,s){var r,i,n,a;const u=null==s?C.Q.Priority1:s;let o="";null!=e.originalTaskEntitySet&&(o=e.originalTaskEntitySet.id);const l=[_.RequestPrefix+o,c.RequestPrefix+o],d=null!==(r=null===(i=e.updatedTaskEntitySet.task)||void 0===i?void 0:i.bucketId)&&void 0!==r?r:"";D.o.isPlexTempId(d)&&l.push(m.RequestPrefix+d);const P=null!==(n=null===(a=e.updatedTaskEntitySet.task)||void 0===a?void 0:a.planId)&&void 0!==n?n:"";return D.o.isPlexTempId(P)&&l.push(k.RequestPrefix+P),new Promise(((s,r)=>{const i=new _(o,this.taskServiceApi.updateTaskAsync.bind(this.taskServiceApi),e,{resolve:s,reject:r},l);this.requestPrioritizer.handleRequest(i,u,void 0,void 0,void 0,void 0,t)}))}undeleteTaskAsync(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new g(e.taskId,this.taskServiceApi.undeleteTaskAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}updateUserDetailsAsync(e,t,s){const r=null==s?C.Q.Priority1:s;return new Promise(((s,i)=>{const n=new f(e.originalUserDetails.id,this.taskServiceApi.updateUserDetailsAsync.bind(this.taskServiceApi),e,{resolve:s,reject:i},[f.RequestPrefix+e.originalUserDetails.id]);this.requestPrioritizer.handleRequest(n,r,void 0,void 0,void 0,void 0,t)}))}updateUnifiedGroupAsync(e,t,s){const r=null==s?C.Q.Priority1:s;return new Promise(((s,i)=>{const n=new h(e.originalGroup.id,this.taskServiceApi.updateUnifiedGroupAsync.bind(this.taskServiceApi),e,{resolve:s,reject:i},[h.RequestPrefix+e.originalGroup.id]);this.requestPrioritizer.handleRequest(n,r,void 0,void 0,void 0,void 0,t)}))}addUserToContainer(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new p.x("ADD_USER_TO_CONTAINER"+e.container.externalId+e.userId,this.taskServiceApi.addUserToContainer.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}removeUserFromContainer(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new p.x("REMOVE_USER_FROM_CONTAINER"+e.container.externalId+e.userId,this.taskServiceApi.removeUserFromContainer.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}setRosterSensitivityLabelAsync(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new p.x("SET_ROSTER_SENSITIVITY_LABLE"+e.rosterContainer,this.taskServiceApi.setRosterSensitivityLabelAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}createGroupConversationThreadAsync(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new l.E("CREATE_CONV_THREAD"+e.groupId+e.newPost.id+e.threadSubject,this.taskServiceApi.createGroupConversationThreadAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}postReplyInGroupConversationThreadAsync(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new l.E("REPLY_CONV_THREAD"+e.groupId+e.threadId,this.taskServiceApi.postReplyInGroupConversationThreadAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}joinGroupAsync(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new A(e.groupId,this.taskServiceApi.joinGroupAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}leaveGroupAsync(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new v(e.groupId,this.taskServiceApi.leaveGroupAsync.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}createUploadSession(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new l.E("CREATE_UPLOAD"+e.groupId+e.itemPath,this.taskServiceApi.createUploadSession.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}uploadBytesToSession(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,r)=>{const i=new p.x("UPLOAD_BYTES"+e.uploadSession.id,this.taskServiceApi.uploadBytesToSession.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}validateGroupNamesAsync(e,t){const s=null==t?C.Q.Priority1:t;return new Promise(((t,i)=>{const n=new r.k("VALIDATE_GROUP_NAMES",this.taskServiceApi.validateGroupNamesAsync.bind(this.taskServiceApi),e,{resolve:t,reject:i},[]);this.requestPrioritizer.handleRequest(n,s,((e,t)=>e.entityId===t.entityId),((e,t)=>{const s=e.primaryRequest;return e.primaryRequest=t.primaryRequest,e.duplicateRequests.push(s),e}))}))}trackExperimentEvent(e,t){const s=null==t?C.Q.Priority10:t;return new Promise(((t,r)=>{const i=new p.x("TRACK_"+e.eventKey,this.taskServiceApi.trackExperimentEvent.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}logNotificationTelemetry(e,t){const s=null==t?C.Q.Priority10:t;return new Promise(((t,r)=>{const i=new p.x("LOG_NOTIFICATION_TELEMETRY",this.taskServiceApi.logNotificationTelemetry.bind(this.taskServiceApi),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)}))}getAppContextSettings(e){const t=null==e?C.Q.Priority1:e;return new Promise(((e,s)=>{const i=new r.k("GET_APP_CONTEXT_SETTINGS",this.taskServiceApi.getAppContextSettings.bind(this.taskServiceApi),void 0,{resolve:e,reject:s},[]);this.requestPrioritizer.handleRequest(i,t,this.duplicateRequestsComparator,this.duplicateRequestHandler)}))}constructor(e,t){this.taskServiceApi=e,this.requestPrioritizer=t,this.duplicateRequestsComparator=(e,t)=>!(e.entityId!==t.entityId||e.requestType!==t.requestType||!G()(e.requestParams,t.requestParams)),this.duplicateRequestHandler=(e,t)=>(e.duplicateRequests.push(t.primaryRequest),null!=t.viewIds&&null!=e.viewIds?e.viewIds.push(...t.viewIds):e.viewIds=void 0,e)}}},88636:(e,t,s)=>{s.d(t,{E:()=>n});var r=s(68552);class i extends r.K{constructor(e,t,s,i,n){super(e,t,s,i,r.Y.Create,n)}}class n extends i{extractNewEntityId(e){return""}updateRequestParams(e,t){}constructor(e,t,s,r,i){super(e,t,s,r,i)}}},43649:(e,t,s)=>{s.d(t,{b:()=>a});var r=s(38921),i=s(68552);class n extends i.K{extractNewEntityId(e){throw new r.v("extractNewEntityId should not be called for DeleteRequest")}constructor(e,t,s,r,n){super(e,t,s,r,i.Y.Delete,n)}}class a extends n{updateRequestParams(e,t){}constructor(e,t,s,r,i){super(e,t,s,r,i)}}},39287:(e,t,s)=>{s.d(t,{k:()=>n});var r=s(38921),i=s(68552);class n extends i.K{extractNewEntityId(e){throw new r.v("extractNewEntityId should not be called for PlannerReadRequest")}updateRequestParams(e,t){}constructor(e,t,s,r,n){super(e,t,s,r,i.Y.Update,n)}}},87596:(e,t,s)=>{s.d(t,{x:()=>i});var r=s(31956);class i extends r.z{updateRequestParams(e,t){}constructor(e,t,s,r,i){super(e,t,s,r,i)}}},31956:(e,t,s)=>{s.d(t,{z:()=>n});var r=s(38921),i=s(68552);class n extends i.K{extractNewEntityId(e){throw new r.v("extractNewEntityId should not be called for UpdateRequest")}constructor(e,t,s,r,n){super(e,t,s,r,i.Y.Update,n)}}}}]);
//# sourceMappingURL=gatedtsapi.4ea7dd60.chunk.js.map