"use strict";(self.webpackChunkfluidhost=self.webpackChunkfluidhost||[]).push([[36818],{36591:(e,t,i)=>{i.d(t,{C:()=>o});class o{constructor(e,t,i,o,r){this.dispatcher=e,this.logicModuleProviders=t,this.entityStoreSet=i,this.clientSettings=o,this.loggers=r}}},29106:(e,t,i)=>{i.r(t),i.d(t,{TasksByPlanViewActionCreator:()=>p});var o=i(38752),r=i(74844),n=i(95783),a=i(64226),s=i(96891),c=i(36591),l=i(8403),d=i(65818),h=i(44430),u=i(98424),g=i(86053),f=i(82841);class p extends c.C{get name(){return s.M.TasksByPlanViewActionCreator}async fetchViewData(e){let t,i,s;this.loggers.traceLogger.logTrace(507880066,r.k.Verbose,"TasksByPlan View - Fetching view data [PlanId=".concat(e,"]"));try{[t,i,s]=await Promise.all([this.logicModuleProviders.bucketModule(),this.logicModuleProviders.planModule(),this.logicModuleProviders.taskModule()])}catch(P){return void this.loggers.traceLogger.logTrace(507880065,r.k.Error,"TasksByPlan View - Failed to dynamically import modules [Error=".concat(P,"]"))}const c=i.fetchPlanAsync(e),p=t.fetchBucketsForPlanAsync(e),y=s.fetchPlanTasksAsync(e,!0),v=await this.logicModuleProviders.notificationModule();Promise.all([c,p,y]).then((async i=>{const[n,s,c]=i,p=c.data.Results;if(0===s.length){const i=l.f.builder.withPropertyBag({id:"",title:g.p.Strings.SharedComponents_DefaultBucketName,planId:e,orderHint:u.O.generateOrderHintBetween(null,null)}).withLocallyUniqueId().build();t.createBucketAsync(i)}const{containerType:y,externalId:P}=n.plan.container,[M,I]=await Promise.all([this.logicModuleProviders.containerModule(),this.logicModuleProviders.userModule()]);if(M.fetchContainer(n.plan.container,!0).then((async e=>{if(y===d.K.Group||y===d.K.Roster){if(!o.B.isUnoContext){(await this.logicModuleProviders.tenantModule()).fetchTenantGroupSettingsAsync().then((t=>{t.enableMIPLabels&&(I.fetchUserAccessibleSensitivityLabelsAsync().catch((()=>{})),I.fetchUserAccessibleSensitivityPolicySettingsAsync().catch((()=>{})),y===d.K.Group&&M.fetchUnifiedGroupAsync(e.externalId).then((()=>{M.fetchGroupSensitivityLabelAsync(e.externalId).catch((()=>{}))})).catch((()=>{})))})).catch((()=>{}))}if(y===d.K.Group){var t;const i=e;i.unifiedGroupDetails&&!i.unifiedGroupDetails.isFullyProvisioned()&&M.pollForGroupFullyProvisioned(i.unifiedGroupDetails);(null===(t=i.unifiedGroupDetails)||void 0===t?void 0:t.currentUserRelationToGroup)===h.N.NonMember&&v.showInfoInternal(a.fc.NonMemberInfo)}}})).catch((()=>{})),y===d.K.DriveItem){const e=[];p.forEach((t=>{t.task.getReferencedUserIds().forEach((t=>{-1===e.indexOf(t)&&e.push(t)}))})),I.fetchUsersAsync(e).catch((()=>{}))}else I.fetchUsersForContainerAsync(n.plan.container).catch((()=>{}));if(y===d.K.DriveItem){(await this.logicModuleProviders.driveItemModule()).fetchDriveItem(P).catch((e=>{this.loggers.traceLogger.logTrace(507880064,r.k.Warning,"Get Drive Item Failure ".concat((0,f.s8)(e)))}))}if(null!=n.plan.sharedWithContainers)for(const e of n.plan.sharedWithContainers)if(e.containerType===d.K.DriveItem){(await this.logicModuleProviders.driveItemModule()).fetchDriveItem(e.externalId).catch((()=>{}))}})).catch((t=>{this.loggers.traceLogger.logTrace(507880035,r.k.Warning,"Loading plan failure: ".concat((0,f.s8)(t))),v.handleRequestFailures(t,[n.t3.Forbidden],[n.t3.NotFound],a.fc.LoadingPlanDataError,e)}))}async onCriticalDataFetchCompletion(e){this.loggers.traceLogger.logTrace(507880034,r.k.Info,"TasksByPlan view critical data fetch completed [PlanId=".concat(e,"]"));(await this.logicModuleProviders.planModule()).subscribeUserToPlanAsync(this.entityStoreSet.appContextStore.getCurrentUserId(),e).catch((()=>{}))}constructor(e,t,i,r){super(e,t,i,o.B.clientSettings,r)}}}}]);
//# sourceMappingURL=tasksbyplanviewac.50beef43.chunk.js.map