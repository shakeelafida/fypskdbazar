"use strict";(self.webpackChunkfluidhost=self.webpackChunkfluidhost||[]).push([[40513],{33287:(e,t,r)=>{r.d(t,{a:()=>s});var a=r(8403);class n{build(){return new s(this)}fromBucketEntityGroupResource(e){return this.withPropertyBag({bucket:a.f.builder.fromWebResource(e.Bucket).build()})}fromGraphBucketResourceTypes(e){return this.withPropertyBag({bucket:a.f.builder.fromGraphResource(e).build()})}withPropertyBag(e){return this.bucket=e.bucket||this.bucket,this}withBucket(e){return this.bucket=e,this}withDefaultValues(){return this.withPropertyBag({bucket:a.f.builder.build()})}}class s{static get builder(){return new n}get id(){return this.bucket.id}toWebSerializable(){return{Bucket:this.bucket.toWebSerializable()}}constructor(e){this.bucket=e.bucket}}},77265:(e,t,r)=>{r.d(t,{j:()=>s});var a=r(65818),n=r(64836);class s extends n.m{constructor(e,t,r){super({externalId:e,containerType:a.K.Roster}),this.assignedSensitivityLabel=t,this.itemVersion=r}}},11755:(e,t,r)=>{r.d(t,{K:()=>a});class a{constructor(e,t){this.skipTokenKey="@odata.nextLink",this.betaBaseUrl="beta/",this.v1BaseUrl="v1.0/",this._baseUrl=e,this.ajaxClient=t}}},8838:(e,t,r)=>{r.r(t),r.d(t,{TaskServiceGraphOdataApi:()=>fe});var a,n=r(95783),s=r(45078),o=r(38752),i=r(26796),l=r(65818),c=r(94283),u=r(5312),d=r(55337),m=r(8403),p=r(33287),g=r(56434),h=r.n(g),y=r(72761),f=r(88908);!function(e){e[e.PlexDiffSync=0]="PlexDiffSync",e[e.GraphDeltaSync=1]="GraphDeltaSync"}(a||(a={}));var b=r(53443),k=r(45277);class T{build(){return new E(this)}fromWebResource(e){return this.withPropertyBag({id:e.ItemId,itemVersion:e.ItemVersion?e.ItemVersion.toString():"",entityType:e.ItemType,updateType:e.Operation,change:e,strategy:a.PlexDiffSync})}fromGraphResource(e){var t;const r=this.parseGraphDiffMetadata(e);return this.withPropertyBag({id:e.id,itemVersion:r.updateType===b.U.Delete?"":null!==(t=e["@odata.etag"])&&void 0!==t?t:"",entityType:r.entityType,change:e,updateType:r.updateType,strategy:a.GraphDeltaSync})}withPropertyBag(e){return this.id=e.id,this.version=e.itemVersion,this.entityType=e.entityType,this.updateType=e.updateType,this.change=e.change||this.change,this.diffStrategy=e.strategy||this.diffStrategy,this}parseGraphDiffMetadata(e){const t={};t[k.U.Task]=y.I.Task,t[k.U.TaskDetails]=y.I.TaskDetails,t[k.U.TaskboardAssignedToTaskFormatting]=y.I.TaskboardAssignedToTaskFormatting,t[k.U.TaskboardBucketTaskFormatting]=y.I.TaskboardBucketTaskFormatting,t[k.U.TaskboardStatusTaskFormatting]=y.I.TaskboardStatusTaskFormatting,t[k.U.Bucket]=y.I.Bucket,t[k.U.Plan]=y.I.Plan,t[k.U.PlanDetails]=y.I.PlanDetails;const r=e["@odata.type"];if(null==r)throw new Error("OdataType not specified in graph diff");const a=t[r];let n;if(e["@removed"])n=b.U.Delete;else switch(n=b.U.Update,a){case y.I.Task:case y.I.Plan:n="createdDateTime"in e?b.U.Insert:b.U.Update;break;case y.I.Bucket:n="planId"in e?b.U.Insert:b.U.Update}return{entityType:a,updateType:n}}constructor(){this.id="",this.version="",this.diffStrategy=a.PlexDiffSync}}var C=r(95810),w=r(59889),x=r(34717),R=r(32561),D=r(64696),P=r(17776),j=r(97139),I=r(94078),A=r(54320),S=r.n(A);class E extends f.W{get entityType(){return this._entityType}static get builder(){return new T}getCreateDiffData(e){if(this._strategy===a.PlexDiffSync)return this.getDiffDataFromWebResource(e||this.entityType,this._change);if(this._strategy===a.GraphDeltaSync)return this.getDiffDataFromGraphResource(this._change);throw new Error("ArgumentException: invalid strategy")}getUpdateDiffData(e,t){if(this._strategy===a.PlexDiffSync)return this.getDiffDataFromWebResource(t||this.entityType,this._change,e);if(this._strategy===a.GraphDeltaSync)return this.getDiffDataFromGraphResource(this._change,e);throw new Error("ArgumentException: invalid strategy")}getDiffDataFromWebResource(e,t,r){let a;switch(e){case y.I.Task:a=x.Y.builder.getDiffDataFromWebResource(t,r);break;case y.I.TaskDetails:a=R.U.builder.getDiffDataFromWebResource(t,r);break;case y.I.Plan:a=C.c.builder.getDiffDataFromWebResource(t,r);break;case y.I.PlanDetails:a=w.y.builder.getDiffDataFromWebResource(t,r);break;case y.I.Bucket:a=m.f.builder.getDiffDataFromWebResource(t,r);break;case y.I.User:a={};break;case y.I.UserDetails:a=I.I.builder.getDiffDataFromWebResource(t,r);break;case y.I.TaskboardStatusFormatting:a={};break;case y.I.TaskboardStatusTaskFormatting:a=j.j.builder.getDiffDataFromWebResource(t,r);break;case y.I.TaskboardAssignedToFormatting:a={};break;case y.I.TaskboardAssignedToTaskFormatting:a=D.x.builder.getDiffDataFromWebResource(t,r);break;case y.I.TaskboardBucketFormatting:a={};break;case y.I.TaskboardBucketTaskFormatting:a=P.g.builder.getDiffDataFromWebResource(t,r);break;default:a={}}return e!==this.entityType&&S()(a)||(a.itemVersion=this.itemVersion),a}getDiffDataFromGraphResource(e,t){let r;switch(this.entityType){case y.I.Task:r=x.Y.builder.getDiffDataFromGraphResource(e,t);break;case y.I.TaskDetails:r=R.U.builder.getDiffDataFromGraphResource(e,t);break;case y.I.Plan:r=C.c.builder.getDiffDataFromGraphResource(e,t);break;case y.I.PlanDetails:r=w.y.builder.getDiffDataFromGraphResource(e,t);break;case y.I.Bucket:r=m.f.builder.getDiffDataFromGraphResource(e,t);break;case y.I.User:case y.I.UserDetails:case y.I.TaskboardStatusFormatting:r={};break;case y.I.TaskboardStatusTaskFormatting:r=j.j.builder.getDiffDataFromGraphResource(e,t);break;case y.I.TaskboardAssignedToFormatting:r={};break;case y.I.TaskboardAssignedToTaskFormatting:r=D.x.builder.getDiffDataFromGraphResource(e,t);break;case y.I.TaskboardBucketFormatting:r={};break;case y.I.TaskboardBucketTaskFormatting:r=P.g.builder.getDiffDataFromGraphResource(e,t);break;default:r={}}return r.itemVersion=this.itemVersion,r}constructor(e){super(e.id,e.version),this._entityType=e.entityType,this._change=e.change,this.updateType=e.updateType,this._strategy=e.diffStrategy}}class B{build(){return new U(this)}fromWebResource(e){const t=(e.Updates||[]).map((e=>E.builder.fromWebResource(e).build()));return this.withPropertyBag({nextToken:e.NextToken,updates:t})}fromGraphResource(e){const t=(e.value||[]).map((e=>E.builder.fromGraphResource(e).build()));return this.withPropertyBag({nextToken:e["@odata.deltaLink"],updates:t})}withPropertyBag(e){return this.nextToken=e.nextToken||"",this.updates=e.updates||[],this}constructor(){this.nextToken="",this.updates=[]}}class U{static get builder(){return new B}constructor(e){this.updates=h()(e.updates),this.nextToken=e.nextToken}}var F=r(40468),v=r(11910),q=r(80708),G=r(39589),N=r(76241),J=r(92970),L=r(6189),M=r(88457),O=r(77265),z=r(50204),_=r(44430),V=r(11755),K=r(679),H=r(41740),W=r.n(H),$=r(88458),Y=r.n($),Q=r(55491),X=r.n(Q),Z=r(19853),ee=r.n(Z),te=r(33411),re=r.n(te),ae=r(34677),ne=r.n(ae),se=r(98990),oe=r.n(se),ie=r(32520),le=r.n(ie),ce=r(86178),ue=r.n(ce),de=r(30035),me=r(91246),pe=r(98502),ge=r(81704),he=r(61739),ye=r(89962);class fe extends V.K{getAugmentationLoopToken(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}async getRosterContainerAsync(e){const t=pe.g.validateAjaxClientRequestParameters(e,["containerId"]);if(null!==t)return Promise.reject(t);const r="".concat(this.betaBaseUrl,"planner/rosters/").concat(e.containerId),a=await this.ajaxClient.executeRequest(r,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getRosterContainerAsync")});try{const e=await a.clone().json();if(null==e)throw new Error("No roster data returned");return new O.j(e.id,null,"")}catch(n){return Promise.reject(pe.g.generateAjaxClientError(a,n))}}async getUnifiedGroupDetailsAsync(e){const t=pe.g.validateAjaxClientRequestParameters(e,["groupId"]);if(null!==t)return Promise.reject(t);try{const[t,r]=await Promise.allSettled([this.getUnifiedGroupDriveUrlAsync(e),this.getOwnersOfGroupAsync(e)]);if("rejected"===r.status)return Promise.reject(r.reason);const a=r.value,n=le()(a,(e=>e.id===o.B.currentUserId));let s;"fulfilled"===t.status&&(s=t.value);const i=-1!==n?_.N.Owner:_.N.Member;return L.y.builder.withPropertyBag({id:e.groupId,currentUserRelationToGroup:i,oneDriveUrl:s,owners:a}).build()}catch(r){return Promise.reject(r)}}async getOwnersOfGroupAsync(e){const t="".concat(this._baseUrl,"groups/").concat(e.groupId,"/owners"),r=await this.ajaxClient.executeRequest(t,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getOwnersOfGroupAsync")});try{const e=await r.clone().json();if(null==e)throw new Error("No unified group owners data returned");return re()(e.value,(e=>z.K.builder.fromGraphUserResource(e).build()))}catch(a){return Promise.reject(pe.g.generateAjaxClientError(r,a))}}async getUnifiedGroupDriveUrlAsync(e){const t="".concat(this._baseUrl,"groups/").concat(e.groupId,"/drive/root/weburl");try{const e=await this.ajaxClient.executeRequest(t,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getUnifiedGroupDriveUrlAsync")});try{const t=await e.clone().json();if(null==t)throw new Error("No unified group drive url data returned");return t.value}catch(n){return Promise.reject(pe.g.generateAjaxClientError(e,n))}}catch(n){var r,a;const e=null===(r=n.response)||void 0===r?void 0:r.status,t=null===(a=n.response)||void 0===a?void 0:a.headers.get("Location");return e===308&&t?t:Promise.reject(n)}}async getJoinedGroupsAsync(e){const t="".concat(this._baseUrl,"me/memberOf/microsoft.graph.group?$filter=groupTypes/any(g:g eq 'Unified')"),r=await this.ajaxClient.executeRequest(t,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getJoinedGroupsAsync")});try{const e=await r.clone().json();if(null==(null===e||void 0===e?void 0:e.value))throw new Error("No unified group data returned");const t=(0,he.n0)(e[this.skipTokenKey]),a=[];return X()(e.value,(e=>{a.push(J.E.builder.fromGraphResource(e).build())})),{data:a,skipToken:t}}catch(a){return Promise.reject(pe.g.generateAjaxClientError(r,a))}}async getFavoritePlansForUserAsync(e){const t=pe.g.validateAjaxClientRequestParameters(e,["userId"]);if(null!==t)return Promise.reject(t);const r=null==e.nextContinuationToken?"".concat(this.betaBaseUrl,"me/planner/favoritePlans?$expand=details"):e.nextContinuationToken,a=await this.ajaxClient.executeRequest(r,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getFavoritePlansForUserAsync"),headers:{Prefer:"include-unknown-enum-members"}});try{const e=await a.clone().json();if(null==e)throw new Error("No task data for plan returned");const t=(0,he.n0)(e[this.skipTokenKey]),r=e.value;return{data:{Results:r.map((e=>F.T.builder.fromGraphPlanResourceTypes(e,e.details).build())),NextContinuationToken:t},statusCode:a.status,xCorrelationId:null}}catch(n){return Promise.reject(pe.g.generateAjaxClientError(a,n))}}async getRecentPlansForUserAsync(e){const t=pe.g.validateAjaxClientRequestParameters(e,["userId"]);if(null!==t)return Promise.reject(t);const r=null==e.nextContinuationToken?"".concat(this.betaBaseUrl,"me/planner/recentPlans?$expand=details"):e.nextContinuationToken,a=await this.ajaxClient.executeRequest(r,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getRecentPlansForUserAsync"),headers:{Prefer:"include-unknown-enum-members"}});try{const e=await a.clone().json();if(null==e)throw new Error("No task data for plan returned");const t=(0,he.n0)(e[this.skipTokenKey]),r=e.value;return{data:{Results:r.map((e=>F.T.builder.fromGraphPlanResourceTypes(e,e.details).build())),NextContinuationToken:t},statusCode:a.status,xCorrelationId:null}}catch(n){return Promise.reject(pe.g.generateAjaxClientError(a,n))}}getRecommendedDocumentPlansForUserAsync(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}getAllDocumentPlansForUserAsync(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}async getContainersAsync(e){var t;let r=[];switch(e.containerType){case l.K.Group:r=await this.getUserGroupContainersAsync();break;case l.K.Roster:r=await this.getUserRosterContainersAsync(e.nextContinuationToken);break;default:return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}return{data:{Results:r,NextContinuationToken:null!==(t=e.nextContinuationToken)&&void 0!==t?t:null},statusCode:null,xCorrelationId:null}}async getUserGroupContainersAsync(){return(await this.getJoinedGroupsAsync()).data.map((e=>new M.Z(e.id,e,null)))}async getUserRosterContainersAsync(e){return(await this.getUserRosterPlansAsync({nextContinuationToken:e})).Results.map((e=>new O.j(e.container.externalId,null,"")))}async getPlansForGroupAsync(e){return this.getPlansForContainerRecursiveAsync({containerType:l.K.Group,accumulator:[],containerId:e.groupId})}async getPlansForGroupInternalAsync(e){var t;const r=null!==(t=e.nextLink)&&void 0!==t?t:"".concat(this.betaBaseUrl,"groups/").concat(e.groupId,"/planner/plans"),a=await this.ajaxClient.executeRequest(r,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getPlansForGroupAsync"),headers:{Prefer:"include-unknown-enum-members"}});try{const e=await a.clone().json();if(null==e)throw new Error("No plan data returned");const t=(0,he.n0)(e[this.skipTokenKey]),r=e.value.map((e=>C.c.builder.fromGraphResource(e).build()));return{skipToken:t,data:r}}catch(n){return Promise.reject(pe.g.generateAjaxClientError(a,n))}}async resolveGroupsToPlansBatchedAsync(e){const t=pe.g.validateAjaxClientRequestParameters(e,["groupIds"]);if(null!==t)return Promise.reject(t);const r=[],a={};e.groupIds.forEach((e=>{r.push(this.getPlansForGroupAsync({groupId:e}).then((t=>{a[e]=t})))}));try{return await Promise.all(r),a}catch(n){return Promise.reject(n)}}resolveContainerIdsToPlansBatchedAsync(e){const{containerType:t,containerIds:r}=e;switch(e.containerType){case l.K.Group:case l.K.Roster:case l.K.User:return this.resolveContainersToPlansBatchedAsync({containerType:t,containerIds:r});default:return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}}async resolveContainersToPlansBatchedAsync(e){const t=pe.g.validateAjaxClientRequestParameters(e,["containerIds"]);if(null!==t)return Promise.reject(t);const{containerType:r}=e,a=[],n={};e.containerIds.forEach((e=>{a.push(this.getPlansForContainerRecursiveAsync({containerType:r,accumulator:[],containerId:e}).then((t=>{n[e]=t})))}));try{return await Promise.all(a),n}catch(s){return Promise.reject(s)}}async getPlansForContainerRecursiveAsync(e){try{var t;const{containerType:r,accumulator:a,containerId:n,skipToken:s}=e;let o;switch(e.containerType){case l.K.Group:o=await this.getPlansForGroupInternalAsync({groupId:e.containerId,nextLink:s});break;case l.K.Roster:o=await this.getPlansForRosterAsync({rosterId:e.containerId,nextLink:s});break;case l.K.User:o=await this.fetchUserContainerPlansAsync({userId:e.containerId,nextLink:s});break;default:throw new Error("ContainerType not supported")}const i=null===(t=o)||void 0===t?void 0:t.data;return o.skipToken?this.getPlansForContainerRecursiveAsync({containerType:r,accumulator:a.concat(i),containerId:n,skipToken:o.skipToken}):e.accumulator.concat(i)}catch(r){return Promise.reject(r)}}async fetchUserContainerPlansAsync(e){var t;const r=null!==(t=e.nextLink)&&void 0!==t?t:"".concat(this.betaBaseUrl,"planner/plans?$filter=container/type+eq+'user'+and+container/containerId+eq+'").concat(e.userId,"'"),a=await this.ajaxClient.executeRequest(r,{telemetryConfig:this.getDefaultRequestTelemetryConfig("fetchUserContainerPlansAsync"),headers:{Prefer:"include-unknown-enum-members"}});try{const e=await a.clone().json();if(null==e)throw new Error("No data returned");const t=(0,he.n0)(e[this.skipTokenKey]),r=e.value.map((e=>C.c.builder.fromGraphResource(e).build()));return{skipToken:t,data:r}}catch(n){return Promise.reject(pe.g.generateAjaxClientError(a,n))}}async getPlansForRosterAsync(e){var t;const r=null!==(t=e.nextLink)&&void 0!==t?t:"".concat(this.betaBaseUrl,"planner/rosters/").concat(e.rosterId,"/plans"),a=await this.ajaxClient.executeRequest(r,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getPlansForRosterAsync"),headers:{Prefer:"include-unknown-enum-members"}});try{const e=await a.clone().json();if(null==e)throw new Error("No plan data returned");const t=(0,he.n0)(e[this.skipTokenKey]),r=e.value.map((e=>C.c.builder.fromGraphResource(e).build()));return{skipToken:t,data:r}}catch(n){return Promise.reject(pe.g.generateAjaxClientError(a,n))}}async getPlanEntitySetAsync(e){const t=pe.g.validateAjaxClientRequestParameters(e,["planId"]);if(null!==t)return Promise.reject(t);const r="".concat(this.betaBaseUrl,"planner/plans/").concat(e.planId,"?$expand=details"),a=await this.ajaxClient.executeRequest(r,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getPlanEntitySetAsync"),headers:{Prefer:"include-unknown-enum-members"}});try{const e=await a.clone().json();if(null==e)throw new Error("No plan data returned");if(null==e.details)throw new Error("No plan details data returned");{const t=e,r=C.c.builder.fromGraphResource(t).build(),a=e.details,n=w.y.builder.fromGraphResource(a).build();return F.T.builder.withPlan(r).withDetails(n).build()}}catch(n){return Promise.reject(pe.g.generateAjaxClientError(a,n))}}async getPlanEntitySetByExternalIdAsync(e){const t=pe.g.validateAjaxClientRequestParameters(e,["contextScenarioId","externalObjectId"]);if(null!==t)return Promise.reject(t);const r="".concat(this.betaBaseUrl,"planner/plans/$filter=contextScenarioId -eq ").concat(encodeURIComponent(e.contextScenarioId)," and externalObjectId -eq ").concat(encodeURIComponent(e.externalObjectId),"&$expand=details"),a=await this.ajaxClient.executeRequest(r,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getPlanEntitySetByExternalIdAsync"),headers:{Prefer:"include-unknown-enum-members"}});try{const e=await a.clone().json();if(null==e)throw new Error("No plan data returned");if(null==e.details)throw new Error("No plan details data returned");{const t=e,r=C.c.builder.fromGraphResource(t).build(),a=e.details,n=w.y.builder.fromGraphResource(a).build();return F.T.builder.withPlan(r).withDetails(n).build()}}catch(n){return Promise.reject(pe.g.generateAjaxClientError(a,n))}}async getTaskEntitySetAsync(e){const t=pe.g.validateAjaxClientRequestParameters(e,["taskId"]);if(null!==t)return Promise.reject(t);const r="".concat(this.betaBaseUrl,"planner/tasks/").concat(e.taskId,"?$expand=details,assignedToTaskBoardFormat,bucketTaskBoardFormat,progressTaskBoardFormat"),a=await this.ajaxClient.executeRequest(r,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getTaskEntitySetAsync")});try{const e=await a.clone().json();if(null==e)throw new Error("No task data returned");if(null==e.details)throw new Error("No details data returned");if(null==e.assignedToTaskBoardFormat)throw new Error("No assignedToTaskBoardFormat data returned");if(null==e.bucketTaskBoardFormat)throw new Error("No bucketTaskBoardFormat data returned");if(null==e.progressTaskBoardFormat)throw new Error("No progressTaskBoardFormat data returned");return q.F.builder.fromGraphResource(e).build()}catch(n){return Promise.reject(pe.g.generateAjaxClientError(a,n))}}async getTasksForPlanAsync(e){const t=pe.g.validateAjaxClientRequestParameters(e,["planId"]);if(null!==t)return Promise.reject(t);const r=null==e.nextContinuationToken?"".concat(this.betaBaseUrl,"planner/plans/").concat(e.planId,"/tasks?$expand=details,assignedToTaskBoardFormat,bucketTaskBoardFormat,progressTaskBoardFormat"):e.nextContinuationToken,a=await this.ajaxClient.executeRequest(r,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getTasksForPlanAsync"),headers:{Prefer:"include-unknown-enum-members"}});try{const e=await a.clone().json();if(null==e)throw new Error("No task data for plan returned");const t=(0,he.n0)(e[this.skipTokenKey]),r=e.value;return{data:{Results:r.map((e=>q.F.builder.fromGraphResource(e).build())),NextContinuationToken:t},statusCode:a.status,xCorrelationId:null}}catch(n){return Promise.reject(pe.g.generateAjaxClientError(a,n))}}async getTasksAssignedToCurrentUserAsync(e){const t=null==e.nextContinuationToken?"".concat(this.betaBaseUrl,"me/planner/tasks?$expand=details"):e.nextContinuationToken,r=await this.ajaxClient.executeRequest(t,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getTasksAssignedToCurrentUserAsync")});try{const e=await r.clone().json();if(null==e)throw new Error("No task data for user returned");const t=(0,he.n0)(e[this.skipTokenKey]),a=e.value;return{data:{Results:a.map((e=>q.F.builder.fromGraphResource(e).build())),NextContinuationToken:t},statusCode:r.status,xCorrelationId:null}}catch(a){return Promise.reject(pe.g.generateAjaxClientError(r,a))}}async getBucketAsync(e){const t="".concat(this._baseUrl,"planner/buckets/").concat(e.bucketId),r=await this.ajaxClient.executeRequest(t,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getBucketAsync")});try{const e=await r.clone().json();if(null==e)throw new Error("No bucket data returned");const t=e,a=m.f.builder.fromGraphResource(t).build();return p.a.builder.withBucket(a).build()}catch(a){return Promise.reject(pe.g.generateAjaxClientError(r,a))}}async getBucketsForPlanAsync(e){const t="".concat(this._baseUrl,"planner/plans/").concat(e.planId,"/buckets?$top=100"),r=await this.ajaxClient.executeRequest(t,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getBucketsForPlanAsync")});try{const e=await r.clone().json();if(null==e)throw new Error("No bucket data for plan returned");const t=e.value;return t.map((e=>m.f.builder.fromGraphResource(e).build()))}catch(a){return Promise.reject(pe.g.generateAjaxClientError(r,a))}}async validateGroupNamesAsync(e){const t=e.isCreation?"".concat(this._baseUrl,"/directoryObjects/validateProperties"):"".concat(this._baseUrl,"groups/").concat(e.unifiedGroup.id,"/validateProperties");let r={};r=e.isCreation?{entityType:"Group",displayName:e.unifiedGroup.displayName,mailNickname:e.unifiedGroup.mailNickname}:{displayName:e.unifiedGroup.displayName};try{const e=await this.ajaxClient.executeRequest(t,{method:n.PJ.Post,body:JSON.stringify(r),headers:{[s.Lr.ContentType]:s.Mq.Json},telemetryConfig:this.getDefaultRequestTelemetryConfig("validateGroupNamesAsync")});if(e.status===n.t3.NoContent)return pe.g.parseValidationResponse("");const a=await e.clone().text();if(null==a)throw new Error("No validateGroupNamesAsync data returned");return pe.g.parseValidationResponse(a)}catch(o){var a;if((null===(a=o.response)||void 0===a?void 0:a.status)===n.t3.UnprocessableEntity){const e=await o.response.clone().text();return pe.g.parseValidationResponse(e)}return Promise.reject(o)}}async getCurrentUserDetailsAsync(e){const t="".concat(this.betaBaseUrl,"me/planner"),r=await this.ajaxClient.executeRequest(t,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getCurrentUserDetailsAsync")});try{const e=await r.clone().json();if(null==e)throw new Error("No user data returned");const t=e;return I.I.builder.fromGraphWebResource(t).build()}catch(a){return Promise.reject(pe.g.generateAjaxClientError(r,a))}}async getDiffSyncTokenAsync(){const e="".concat(this.betaBaseUrl,"me/planner/all/delta"),t=await this.ajaxClient.executeRequest(e,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getDiffSyncTokenAsync")});try{const e=await t.clone().json();if(null==e||null==e[this.skipTokenKey])throw new Error("No data returned");return e[this.skipTokenKey]}catch(r){return Promise.reject(pe.g.generateAjaxClientError(t,r))}}async getDiffSyncFeedAsync(e){let t=e.diffSyncToken;t&&t.indexOf("?")>0&&(t=t.split("?")[1]);const r="".concat(this.betaBaseUrl,"me/planner/all/delta?").concat(t),a=await this.ajaxClient.executeRequest(r,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getDiffSyncFeedAsync")});try{const e=await a.clone().json();if(null==e)throw new Error("No data returned");return U.builder.fromGraphResource(e).build()}catch(n){return Promise.reject(pe.g.generateAjaxClientError(a,n))}}async getFilteredTenantUsersByKeyword(e){let t="".concat(this._baseUrl,"users?"),r="";o.B.clientSettings.ECSSettings.RestrictedGuestAccessExtendedFlight&&(r="userType ne 'guest' and ",t+="$count=true&"),r+="("+(0,he.Ny)("givenName",e.keyword)+" or "+(0,he.Ny)("surname",e.keyword)+" or "+(0,he.Ny)("displayName",e.keyword)+" or "+(0,he.Ny)("mail",e.keyword)+" or "+(0,he.Ny)("userPrincipalName",e.keyword)+")",t+="$filter=".concat(r),e.skipToken&&(t+="&$skiptoken=".concat(e.skipToken)),t+="&$select=id,businessPhones,displayName,givenName,jobTitle,mail,mobilePhone,officeLocation,preferredLanguage,surname,userPrincipalName,proxyAddresses,userType";const a=o.B.clientSettings.ECSSettings.RestrictedGuestAccessExtendedFlight?{ConsistencyLevel:"eventual"}:{},n=await this.ajaxClient.executeRequest(t,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getFilteredTenantUsersByKeyword"),headers:a});let s=[];try{var i;s=null!==(i=(await n.clone().json()).value)&&void 0!==i?i:[]}catch(l){s=[]}return s.map((e=>z.K.builder.fromGraphUserResource(e).build()))}getSuiteNav(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}getIsUserLicensed(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}getLicensesForUser(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}async getTenantGroupSettingsAsync(){const e="".concat(this.v1BaseUrl,"groupSettings"),t=await this.ajaxClient.executeRequest(e,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getTenantGroupSettingsAsync")});try{const e=await t.clone().json();if(null==e||!e.value)throw pe.g.generateAjaxClientError(t,"No tenant group settings returned");const r=oe()(e.value,(e=>e.templateId===this.unifiedGroupTemplateId&&e.displayName===this.unifiedGroupDisplayName));return r?d.h.builder.fromGraphResource(r).build():d.h.builder.withPropertyBag({enableUnifiedGroupCreation:!0}).build()}catch(r){throw pe.g.generateAjaxClientError(t,r)}}async getSensitivityLabelsAsync(){const e="".concat(this.betaBaseUrl,"me/informationProtection/sensitivityLabels?$filter=applicableTo+has+'site,unifiedGroup'"),t=await this.ajaxClient.executeRequest(e,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getSensitivityLabelsAsync")});try{const e=await t.clone().json();if(null==e||!e.value)throw pe.g.generateAjaxClientError(t,"No sensitivity labels returned");return e.value.map((e=>c.k.builder.fromGraphResource(e).build()))}catch(r){throw pe.g.generateAjaxClientError(t,r)}}async getUnifiedGroupSensitivityLabelAsync(e){const t="".concat(this.v1BaseUrl,"groups/").concat(e.groupId,"?$select=assignedLabels"),r=await this.ajaxClient.executeRequest(t,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getSensitivityLabelsAsync")});try{const e=await r.clone().json();if(null==e||!e.value||!e.value[0])throw pe.g.generateAjaxClientError(r,"No assigned label returned");return e.value[0].labelId}catch(a){throw pe.g.generateAjaxClientError(r,a)}}async getSensitivityPolicySettingsAsync(){const e="".concat(this.betaBaseUrl,"me/informationProtection/sensitivityPolicySettings?$filter=applicableTo+has+'site,unifiedGroup'"),t=await this.ajaxClient.executeRequest(e,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getSensitivityPolicySettingsAsync")});try{const e=await t.clone().json();return u.H.fromGraphResource(e)}catch(r){return u.H.fromGraphResource(null)}}getLatestBuild(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}getMobileAppLinkViaCurrentUserEmailAsync(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}getAppContextSettings(){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}getOperationStatusAsync(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}getContainerPermissionsAsync(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}getTaskPermissionsAsync(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}async getUserRosterPlansAsync(e){const t=null==e.nextContinuationToken?"".concat(this.betaBaseUrl,"me/planner/rosterPlans"):e.nextContinuationToken,r=await this.ajaxClient.executeRequest(t,{telemetryConfig:this.getDefaultRequestTelemetryConfig("getUserRosterPlansAsync"),headers:{Prefer:"include-unknown-enum-members"}});try{const e=await r.clone().json();if(null==e)throw new Error("No data returned");const t=(0,he.n0)(e[this.skipTokenKey]),a=e.value.map((e=>C.c.builder.fromGraphResource(e).build()));return{NextContinuationToken:t,Results:a}}catch(a){return Promise.reject(pe.g.generateAjaxClientError(r,a))}}async getFormResponseAsync(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}async getApprovalDetailsAsync(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}async deleteBucketAsync(e){const t="".concat(this._baseUrl,"planner/buckets/").concat(e.bucketId);return await this.ajaxClient.executeRequest(t,{method:n.PJ.Delete,headers:{[s.Lr.IfMatch]:e.itemVersion},telemetryConfig:this.getDefaultRequestTelemetryConfig("deleteBucketAsync")}),Promise.resolve()}async deletePlanAsync(e){const t="".concat(this._baseUrl,"planner/plans/").concat(e.planId);return await this.ajaxClient.executeRequest(t,{method:n.PJ.Delete,headers:{[s.Lr.IfMatch]:e.itemVersion},telemetryConfig:this.getDefaultRequestTelemetryConfig("deletePlanAsync")}),Promise.resolve()}async deleteUnifiedGroupAsync(e){const t="".concat(this._baseUrl,"groups/").concat(e.groupId);return await this.ajaxClient.executeRequest(t,{method:n.PJ.Delete,telemetryConfig:this.getDefaultRequestTelemetryConfig("deleteUnifiedGroupAsync")}),Promise.resolve()}async deleteTaskAsync(e){const t="".concat(this._baseUrl,"planner/tasks/").concat(e.taskId);return await this.ajaxClient.executeRequest(t,{method:n.PJ.Delete,headers:{[s.Lr.IfMatch]:e.itemVersion},telemetryConfig:this.getDefaultRequestTelemetryConfig("deleteTaskAsync")}),q.F.builder.withTask(x.Y.builder.withPropertyBag({id:e.taskId,planId:"PLN1",title:""}).build()).withDetails(R.U.builder.withId(e.taskId).build()).withFormatData(G._.builder.withPropertyBag({assignedBoardFormat:D.x.builder.withId(e.taskId).build(),bucketBoardFormat:P.g.builder.withId(e.taskId).build(),progressBoardFormat:j.j.builder.withId(e.taskId).build()}).build()).build()}async cancelUploadSession(e){const t=e.uploadSession.uploadUrl;return await this.ajaxClient.executeRequest(t,{method:n.PJ.Delete,telemetryConfig:this.getDefaultRequestTelemetryConfig("cancelUploadSessionAsync")}),Promise.resolve()}async removeUserFromPlannerRosterMembers(e){const t="".concat(this.betaBaseUrl,"planner/rosters/").concat(e.container.externalId,"/members/").concat(e.userId);await this.ajaxClient.executeRequest(t,{method:n.PJ.Delete,telemetryConfig:this.getDefaultRequestTelemetryConfig("removeUserFromPlannerRosterMembers"),retryConfig:(0,ge.Vj)({maxRetryCount:0})})}async removeUserFromGroupMembers(e){const t="".concat(this._baseUrl,"groups/").concat(e.container.externalId,"/members/").concat(e.userId,"/$ref");await this.ajaxClient.executeRequest(t,{method:n.PJ.Delete,telemetryConfig:this.getDefaultRequestTelemetryConfig("removeUserFromGroupMembers"),retryConfig:(0,ge.Vj)({maxRetryCount:0})})}async cancelApproval(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}async createPlannerRosterAsync(){const e="".concat(this._baseUrl,"planner/rosters"),t={"@odata.type":k.U.PlannerRoster},r=await this.ajaxClient.executeRequest(e,{method:n.PJ.Post,body:JSON.stringify(t),headers:{[s.Lr.ContentType]:s.Mq.Json},telemetryConfig:this.getDefaultRequestTelemetryConfig("createPlannerRosterAsync")});try{const e=await r.clone().json();if(null==e)throw new Error("No group data returned");return new O.j(e.id,null,"")}catch(a){return Promise.reject(pe.g.generateAjaxClientError(r,a))}}async createGroupAsync(e){const t="".concat(this._baseUrl,"groups"),r=e.unifiedGroupInfo.toGraphSerializable();r.autoSubscribeNewMembers=void 0,delete r.Id,r["owners@odata.bind"]=["".concat(this._baseUrl,"users/").concat(o.B.currentUserId)],r["members@odata.bind"]=["".concat(this._baseUrl,"users/").concat(o.B.currentUserId)];const a=await this.ajaxClient.executeRequest(t,{method:n.PJ.Post,body:JSON.stringify(r),headers:{[s.Lr.ContentType]:s.Mq.Json},telemetryConfig:this.getDefaultRequestTelemetryConfig("createGroupAsync")});try{const e=await a.clone().json();if(null==e)throw new Error("No group data returned");const t=e;return J.E.builder.fromGraphResource(t).build()}catch(i){return Promise.reject(pe.g.generateAjaxClientError(a,i))}}async createApproval(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}async createPlanAsync(e){var t;const r="".concat(this.betaBaseUrl,"planner/plans"),a=e.newPlanEntitySet.plan.toGraphSerializable(),o=null===(t=e.newPlanEntitySet.planDetails)||void 0===t?void 0:t.toGraphSerializable();o&&delete o["@odata.etag"],S()(a.creationSource)&&delete a.creationSource;const i={...a,details:o},l=await this.ajaxClient.executeRequest(r,{method:n.PJ.Post,body:JSON.stringify(i),headers:{[s.Lr.ContentType]:s.Mq.Json,Prefer:"include-unknown-enum-members"},telemetryConfig:this.getDefaultRequestTelemetryConfig("createPlanAsync")});try{const e=await l.clone().json();if(null==e)throw new Error("No plan data returned");const t=e,r=C.c.builder.fromGraphResource(t).build();return F.T.builder.withPlan(r).build()}catch(c){return Promise.reject(pe.g.generateAjaxClientError(l,c))}}copyPlanAsync(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}async createBucketAsync(e){const t="".concat(this._baseUrl,"planner/buckets/"),r=e.bucketInfo.toGraphSerializable(),a=await this.ajaxClient.executeRequest(t,{method:n.PJ.Post,body:JSON.stringify(r),headers:{[s.Lr.ContentType]:s.Mq.Json},telemetryConfig:this.getDefaultRequestTelemetryConfig("createBucketAsync")});try{const e=await a.clone().json();if(null==e)throw new Error("No bucket data returned");const t=m.f.builder.fromGraphResource(e).build();return p.a.builder.withBucket(t).build()}catch(o){return Promise.reject(pe.g.generateAjaxClientError(a,o))}}async createTaskAsync(e){var t,r;const a="".concat(this.betaBaseUrl,"planner/tasks"),o=e.newTaskEntitySet.task.toGraphSerializable(),i=null===(t=e.newTaskEntitySet.taskDetails)||void 0===t?void 0:t.toGraphSerializable(),l=null===(r=e.newTaskEntitySet.taskFormatData)||void 0===r?void 0:r.toGraphSerializable();o.recurrence&&delete o.recurrence.seriesId,i&&(delete i["@odata.etag"],null==i.description&&delete i.description,null==i.notes&&delete i.notes),null!==l&&void 0!==l&&l.assignmentBoardFormat&&delete l.assignmentBoardFormat["@odata.etag"],null!==l&&void 0!==l&&l.bucketBoardFormat&&delete l.bucketBoardFormat["@odata.etag"],null!==l&&void 0!==l&&l.progressBoardFormat&&delete l.progressBoardFormat["@odata.etag"];const c={...o,...l,details:i},u=await this.ajaxClient.executeRequest(a,{method:n.PJ.Post,body:JSON.stringify(c),headers:{[s.Lr.ContentType]:s.Mq.Json},telemetryConfig:this.getDefaultRequestTelemetryConfig("createTaskAsync")});try{const e=await u.clone().json();if(null==e)throw new Error("No task data returned");return await this.getTaskEntitySetAsync({taskId:e.id})}catch(d){return Promise.reject(pe.g.generateAjaxClientError(u,d))}}async updateBucketAsync(e,t){const r="".concat(this._baseUrl,"planner/buckets/").concat(e.originalBucket.id),a={};if(e.originalBucket.title!==e.updatedBucket.title&&(a.name=e.updatedBucket.title),e.originalBucket.orderHint!==e.updatedBucket.orderHint&&(a.orderHint=e.updatedBucket.orderHint),e.originalBucket.planId!==e.updatedBucket.planId&&(a.planId=e.updatedBucket.planId),S()(a))return p.a.builder.withBucket(e.updatedBucket).build();const o=await this.ajaxClient.executeRequest(r,{method:n.PJ.Patch,body:JSON.stringify(a),headers:{[s.Lr.IfMatch]:e.originalBucket.itemVersion,Prefer:"return=representation",[s.Lr.ContentType]:s.Mq.Json},telemetryConfig:this.getDefaultRequestTelemetryConfig("updateBucketAsync")});try{const e=await o.clone().json();if(null==e)throw new Error("No update response returned");const t=e,r=m.f.builder.fromGraphResource(t).build();return p.a.builder.withBucket(r).build()}catch(i){return Promise.reject(pe.g.generateAjaxClientError(o,i))}}async updatePlanAsync(e,t){const{originalPlanEntitySet:r,updatedPlanEntitySet:a}=e;let o={};if(r.plan&&a.plan){const e=r.plan.toGraphSerializable(),t=a.plan.toGraphSerializable(),n=(e,t,r)=>"displayNameSegments"===r?t:K.B.getDiffMomentCustomizer(e,t,r),s=(e,t,r)=>{if("contexts"===r){if(ee()(e,t))return{};{const r=K.B.getDiff(e,t),a=K.B.getDiff(t,e);null!=r&&X()(r,((e,t)=>{r[t]=null})),null!=a&&X()(a,((e,r)=>{a[r]=t[r]}));const s=ne()(r,a);for(const o in e)if(o in t){const r=e[o],a=t[o];s&&!ee()(r,a)&&(s[o]=K.B.getDiff(r,a,n),s[o]["@odata.type"]="#microsoft.graph.plannerPlanContext")}return s}}return K.B.getDiffMomentCustomizer(e,t,r)};o=K.B.getDiff(e,t,s)}const i={};if(r.planDetails&&a.planDetails){if(!ee()(r.planDetails.categories,a.planDetails.categories)){const e={};for(let t=0;t<r.planDetails.categories.length;t++)r.planDetails.categories[t]!==a.planDetails.categories[t]&&(e["category"+(t+1)]=a.planDetails.categories[t]);i.categoryDescriptions=e}if(!ee()(r.planDetails.sharedWith,a.planDetails.sharedWith)){const e={},t=Y()(r.planDetails.sharedWith,a.planDetails.sharedWith);for(let r=0;r<t.length;r++)e[t[r]]=!1;const n=Y()(a.planDetails.sharedWith,r.planDetails.sharedWith);for(let r=0;r<n.length;r++)e[n[r]]=!0;i.sharedWith=e}if(!ee()(r.planDetails.contextDetails,a.planDetails.contextDetails)){const e={};for(const t in r.planDetails.contextDetails)t in a.planDetails.contextDetails?ee()(r.planDetails.contextDetails[t].url,a.planDetails.contextDetails[t].url)||(e[t]={"@odata.type":"#microsoft.graph.plannerPlanContextDetails",url:a.planDetails.contextDetails[t].url}):e[t]=null;for(const t in a.planDetails.contextDetails)t in r.planDetails.contextDetails||(e[t]={"@odata.type":"#microsoft.graph.plannerPlanContextDetails",url:a.planDetails.contextDetails[t].url});i.contextDetails=e}}const l=async()=>{const e="".concat(this.betaBaseUrl,"planner/plans/").concat(r.plan.id),t=await this.ajaxClient.executeRequest(e,{method:n.PJ.Patch,headers:{[s.Lr.IfMatch]:r.plan.itemVersion,Prefer:"return=representation",[s.Lr.ContentType]:s.Mq.Json},body:JSON.stringify(o),telemetryConfig:this.getDefaultRequestTelemetryConfig("updatePlanAsync")});try{const e=await t.clone().json();if(null==e)throw new Error("No update response returned");const a=e;a.container.type=r.plan.container.containerType;return C.c.builder.fromGraphResource(a).build()}catch(a){return Promise.reject(pe.g.generateAjaxClientError(t,a))}},c=async()=>{const e="".concat(this.betaBaseUrl,"planner/plans/").concat(r.planDetails.id,"/details"),t=await this.ajaxClient.executeRequest(e,{method:n.PJ.Patch,headers:{[s.Lr.IfMatch]:r.planDetails.itemVersion,Prefer:"return=representation",[s.Lr.ContentType]:s.Mq.Json},body:JSON.stringify(i),telemetryConfig:this.getDefaultRequestTelemetryConfig("updatePlanDetailsAsync")});try{const e=await t.clone().json();if(null==e)throw new Error("No update response returned");const r=e;return w.y.builder.fromGraphResource(r).build()}catch(a){return Promise.reject(pe.g.generateAjaxClientError(t,a))}};if(S()(o)&&S()(i))return F.T.builder.withPlan(a.plan).withDetails(a.planDetails).build();if(S()(o)||S()(i)){if(S()(o)){const e=await c();return F.T.builder.withPlan(r.plan).withDetails(e).build()}{const e=await l();return F.T.builder.withPlan(e).withDetails(r.planDetails).build()}}{const e=await l(),t=100;await(0,de.y)(t);const r=await c();return F.T.builder.withPlan(e).withDetails(r).build()}}async updateTaskAsync(e,t){const r=e.originalTaskEntitySet.id;let a={};if(e.originalTaskEntitySet.task&&e.updatedTaskEntitySet.task){const t=e.originalTaskEntitySet.task.toGraphSerializable(),r=e.updatedTaskEntitySet.task.toGraphSerializable(),n={category1:!1,category2:!1,category3:!1,category4:!1,category5:!1,category6:!1,category7:!1,category8:!1,category9:!1,category10:!1,category11:!1,category12:!1,category13:!1,category14:!1,category15:!1,category16:!1,category17:!1,category18:!1,category19:!1,category20:!1,category21:!1,category22:!1,category23:!1,category24:!1,category25:!1},s=(e,t,r)=>{if("appliedCategories"===r){if(ee()(e,t))return{};{const r=ne()(W()(n),e),a=ne()(W()(n),t);return K.B.getDiff(r,a)}}if("assignments"===r){if(ee()(e,t))return{};{const r=K.B.getDiff(e,t),a=K.B.getDiff(t,e);return X()(r,((e,t)=>{r[t]=null})),X()(a,((e,r)=>{a[r]=t[r]})),ne()(r,a)}}return"recurrence"===r?ee()(e,t)?{}:null==e?{schedule:t.schedule}:K.B.getDiff(e,t,o):K.B.getDiffMomentCustomizer(e,t,r)},o=(e,t,r)=>"schedule"===r?ee()(e,t)?{}:null==t||null==e?t:K.B.getDiff(e,t,i):K.B.getDiffMomentCustomizer(e,t,r),i=(e,t,r)=>"pattern"===r?ee()(e,t)?{}:t:K.B.getDiffMomentCustomizer(e,t,r);a=K.B.getDiff(t,r,s)}let o={};if(e.originalTaskEntitySet.taskDetails&&e.updatedTaskEntitySet.taskDetails){const t=e.originalTaskEntitySet.taskDetails.toGraphSerializable(),r=e.updatedTaskEntitySet.taskDetails.toGraphSerializable(),a=(e,t,r)=>{if("checklist"===r){if(ee()(e,t))return{};{const r=K.B.getDiff(e,t),a=K.B.getDiff(t,e);X()(r,((e,t)=>{r[t]=null})),X()(a,((e,r)=>{a[r]=t[r]}));const n=ne()(r,a);if(n)for(const s in e)if(s in t){const r=e[s],a=t[s];ee()(r,a)||(n[s]=K.B.getDiff(r,a,K.B.getDiffMomentCustomizer),n[s]["@odata.type"]="microsoft.graph.plannerChecklistItem")}return n}}if("references"===r){if(ee()(e,t))return{};{const r=K.B.getDiff(e,t),a=K.B.getDiff(t,e);X()(r,((e,t)=>{r[t]=null})),X()(a,((e,r)=>{a[r]=t[r]}));const n=ne()(r,a);if(n)for(const s in e)if(s in t){const r=e[s],a=t[s];ee()(r,a)||(n[s]=K.B.getDiff(r,a,K.B.getDiffMomentCustomizer),n[s]["@odata.type"]="#microsoft.graph.plannerExternalReference")}return n}}if("notes"===r)return ee()(e,t)?{}:t;if("forms"!==r||ee()(e,t))return K.B.getDiffMomentCustomizer(e,t,r);{const r=e,a=t,n=K.B.getDiff(r,a,K.B.getDiffMomentCustomizer);if(n){for(const e in n)n.hasOwnProperty(e)&&(n[e].formResponse=String(n[e].formResponse),n[e]["@odata.type"]="#microsoft.taskServices.form");return n}}};o=K.B.getDiff(t,r,a)}const i={},l={},c={};if(e.originalTaskEntitySet.taskFormatData&&e.updatedTaskEntitySet.taskFormatData){if(e.originalTaskEntitySet.taskFormatData.assignmentBoardFormat&&e.updatedTaskEntitySet.taskFormatData.assignmentBoardFormat){const{orderHintsByAssignee:t,unassignedOrderHint:r}=e.originalTaskEntitySet.taskFormatData.assignmentBoardFormat,{orderHintsByAssignee:a,unassignedOrderHint:n}=e.updatedTaskEntitySet.taskFormatData.assignmentBoardFormat;if(!ee()(t,a)){const e={};Object.keys(a).forEach((r=>{a[r]!==t[r]&&(e[r]=a[r])})),i.orderHintsByAssignee=e}r!==n&&(i.unassignedOrderHint=n)}e.originalTaskEntitySet.taskFormatData.bucketBoardFormat&&e.updatedTaskEntitySet.taskFormatData.bucketBoardFormat&&e.originalTaskEntitySet.taskFormatData.bucketBoardFormat.orderHint!==e.updatedTaskEntitySet.taskFormatData.bucketBoardFormat.orderHint&&(l.orderHint=e.updatedTaskEntitySet.taskFormatData.bucketBoardFormat.orderHint),e.originalTaskEntitySet.taskFormatData.progressBoardFormat&&e.updatedTaskEntitySet.taskFormatData.progressBoardFormat&&e.originalTaskEntitySet.taskFormatData.progressBoardFormat.orderHint!==e.updatedTaskEntitySet.taskFormatData.progressBoardFormat.orderHint&&(c.orderHint=e.updatedTaskEntitySet.taskFormatData.progressBoardFormat.orderHint)}const u=!(!S()(a)||!S()(e.originalTaskEntitySet.task)),d=!(!S()(o)||!S()(e.originalTaskEntitySet.taskDetails)),m=!(!S()(i)||e.originalTaskEntitySet.taskFormatData&&!S()(e.originalTaskEntitySet.taskFormatData.assignmentBoardFormat)),p=!(!S()(l)||e.originalTaskEntitySet.taskFormatData&&!S()(e.originalTaskEntitySet.taskFormatData.bucketBoardFormat)),g=!(!S()(c)||e.originalTaskEntitySet.taskFormatData&&!S()(e.originalTaskEntitySet.taskFormatData.progressBoardFormat));let h;(u||d||m||p||g)&&(h=await this.getTaskEntitySetAsync({taskId:r}));const y=(async()=>{if(S()(a))return S()(e.originalTaskEntitySet.task)?h.task:e.originalTaskEntitySet.task;{const r="".concat(this.betaBaseUrl,"planner/tasks/").concat(e.originalTaskEntitySet.id),o=await this.ajaxClient.executeRequest(r,{method:n.PJ.Patch,headers:{[s.Lr.IfMatch]:e.originalTaskEntitySet.task.itemVersion,Prefer:"return=representation",[s.Lr.ContentType]:s.Mq.Json},body:JSON.stringify(a),telemetryConfig:this.getDefaultRequestTelemetryConfig("updateTaskAsync")});try{const e=await o.clone().json();if(null==e)throw new Error("No update response returned");return x.Y.builder.fromGraphResource(e).build()}catch(t){return Promise.reject(pe.g.generateAjaxClientError(o,t))}}})(),f=(async()=>{if(S()(o))return S()(e.originalTaskEntitySet.taskDetails)?h.taskDetails:e.originalTaskEntitySet.taskDetails;return await this.updateTaskDetailsAsync({taskDetailsChanges:o,taskDetails:e.originalTaskEntitySet.taskDetails})})(),b=(async()=>{if(S()(i))return e.originalTaskEntitySet.taskFormatData&&!S()(e.originalTaskEntitySet.taskFormatData.assignmentBoardFormat)?e.originalTaskEntitySet.taskFormatData.assignmentBoardFormat:h.taskFormatData.assignmentBoardFormat;await y;return await this.updateAssignedToTaskboardTaskFormatAsync({assignedToTaskBoardFormatChanges:i,assignedToTaskboadFormat:e.originalTaskEntitySet.taskFormatData.assignmentBoardFormat})})(),k=(async()=>{if(S()(l))return e.originalTaskEntitySet.taskFormatData&&!S()(e.originalTaskEntitySet.taskFormatData.bucketBoardFormat)?e.originalTaskEntitySet.taskFormatData.bucketBoardFormat:h.taskFormatData.bucketBoardFormat;return await this.updateBucketTaskboardTaskFormatAsync({bucketTaskBoardFormatChanges:l,bucketTaskboadFormat:e.originalTaskEntitySet.taskFormatData.bucketBoardFormat})})(),T=(async()=>{if(S()(c))return e.originalTaskEntitySet.taskFormatData&&!S()(e.originalTaskEntitySet.taskFormatData.progressBoardFormat)?e.originalTaskEntitySet.taskFormatData.progressBoardFormat:h.taskFormatData.progressBoardFormat;return await this.updateProgressTaskboardTaskFormatAsync({progressTaskBoardFormatChanges:c,progressTaskboadFormat:e.originalTaskEntitySet.taskFormatData.progressBoardFormat})})(),C=[y,f,b,k,T],w=await Promise.all(C),R=G._.builder.withPropertyBag({assignedBoardFormat:w[2],bucketBoardFormat:w[3],progressBoardFormat:w[4]}).build();return q.F.builder.withTask(w[0]).withDetails(w[1]).withFormatData(R).build()}undeleteTaskAsync(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}async updateTaskDetailsAsync(e){const t="".concat(this.betaBaseUrl,"planner/tasks/").concat(e.taskDetails.id,"/details"),r=e.taskDetailsChanges,a=await this.ajaxClient.executeRequest(t,{method:n.PJ.Patch,headers:{[s.Lr.IfMatch]:e.taskDetails.itemVersion,Prefer:"return=representation",[s.Lr.ContentType]:s.Mq.Json},body:JSON.stringify(r),telemetryConfig:this.getDefaultRequestTelemetryConfig("updateTaskDetailsAsync")});try{const e=await a.clone().json();if(null==e)throw new Error("No update response returned");return R.U.builder.fromGraphResource(e).build()}catch(o){return Promise.reject(pe.g.generateAjaxClientError(a,o))}}async updateAssignedToTaskboardTaskFormatAsync(e){const t="".concat(this._baseUrl,"planner/tasks/").concat(e.assignedToTaskboadFormat.id,"/assignedToTaskBoardFormat"),r=e.assignedToTaskBoardFormatChanges,a=await this.ajaxClient.executeRequest(t,{method:n.PJ.Patch,headers:{[s.Lr.IfMatch]:e.assignedToTaskboadFormat.itemVersion,Prefer:"return=representation",[s.Lr.ContentType]:s.Mq.Json},body:JSON.stringify(r),telemetryConfig:this.getDefaultRequestTelemetryConfig("updateAssignedToTaskboardTaskFormatAsync")});try{const e=await a.clone().json();if(null==e)throw new Error("No update response returned");return D.x.builder.fromGraphResource(e).build()}catch(o){return Promise.reject(pe.g.generateAjaxClientError(a,o))}}async updateBucketTaskboardTaskFormatAsync(e){const t="".concat(this._baseUrl,"planner/tasks/").concat(e.bucketTaskboadFormat.id,"/bucketTaskBoardFormat"),r=e.bucketTaskBoardFormatChanges,a=await this.ajaxClient.executeRequest(t,{method:n.PJ.Patch,headers:{[s.Lr.IfMatch]:e.bucketTaskboadFormat.itemVersion,Prefer:"return=representation",[s.Lr.ContentType]:s.Mq.Json},body:JSON.stringify(r),telemetryConfig:this.getDefaultRequestTelemetryConfig("updateBucketTaskboardTaskFormatAsync")});try{const e=await a.clone().json();if(null==e)throw new Error("No update response returned");return P.g.builder.fromGraphResource(e).build()}catch(o){return Promise.reject(pe.g.generateAjaxClientError(a,o))}}async updateProgressTaskboardTaskFormatAsync(e){const t="".concat(this._baseUrl,"planner/tasks/").concat(e.progressTaskboadFormat.id,"/progressTaskBoardFormat"),r=e.progressTaskBoardFormatChanges,a=await this.ajaxClient.executeRequest(t,{method:n.PJ.Patch,headers:{[s.Lr.IfMatch]:e.progressTaskboadFormat.itemVersion,Prefer:"return=representation",[s.Lr.ContentType]:s.Mq.Json},body:JSON.stringify(r),telemetryConfig:this.getDefaultRequestTelemetryConfig("updateProgressTaskboardTaskFormatAsync")});try{const e=await a.clone().json();if(null==e)throw new Error("No update response returned");return j.j.builder.fromGraphResource(e).build()}catch(o){return Promise.reject(pe.g.generateAjaxClientError(a,o))}}async updateUserDetailsAsync(e,t){const r="".concat(this.betaBaseUrl,"me/planner"),a=e.originalUserDetails.recentPlans.toGraphSerializable(),o=e.updatedUserDetails.recentPlans.toGraphSerializable(),i=K.B.getDiff(a,o),l=K.B.getDiff(o,a);X()(i,((e,t)=>{i[t]=null})),X()(l,((e,t)=>{l[t]=o[t]}));const c=ne()(i,l),u=await this.getCurrentUserDetailsAsync({}),d={recentPlanReferences:c},m=await this.ajaxClient.executeRequest(r,{method:n.PJ.Patch,headers:{[s.Lr.IfMatch]:u.itemVersion,Prefer:"return=representation",[s.Lr.ContentType]:s.Mq.Json},body:JSON.stringify(d),telemetryConfig:this.getDefaultRequestTelemetryConfig("updateUserDetailsAsync")});try{const t=await m.clone().json();if(null==t)throw new Error("No post response returned");const r={...t,id:e.updatedUserDetails.id};return I.I.builder.fromGraphWebResource(r).build()}catch(p){return Promise.reject(pe.g.generateAjaxClientError(m,p))}}async updateUnifiedGroupAsync(e,t){const r="".concat(this._baseUrl,"groups/").concat(e.originalGroup.id),a={};return e.originalGroup.displayName!==e.updatedGroup.displayName&&(a.displayName=e.updatedGroup.displayName),e.originalGroup.description!==e.updatedGroup.description&&(a.description=e.updatedGroup.description),e.originalGroup.visibility!==N.X.HiddenMembership&&e.originalGroup.visibility!==e.updatedGroup.visibility&&(a.visibility=N.X[e.updatedGroup.visibility]),S()(a)||await this.ajaxClient.executeRequest(r,{method:n.PJ.Patch,body:JSON.stringify(a),headers:{[s.Lr.ContentType]:s.Mq.Json},telemetryConfig:this.getDefaultRequestTelemetryConfig("updateUnifiedGroupAsync")}),e.updatedGroup}async updateApproval(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}async addUserToContainer(e){switch(e.container.containerType){case l.K.Roster:await this.addUserToPlannerRosterMembers(e);break;case l.K.Group:await this.addUserToGroupMembers(e);break;default:return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}}async removeUserFromContainer(e){switch(e.container.containerType){case l.K.Roster:await this.removeUserFromPlannerRosterMembers(e);break;case l.K.Group:await this.removeUserFromGroupMembers(e);break;default:return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}}async setRosterSensitivityLabelAsync(e){var t,r;const a="".concat(this.betaBaseUrl,"/planner/rosters/").concat(e.rosterContainer.externalId),o={rosterId:e.rosterContainer.externalId,sensitivityLabelId:null===(t=e.rosterContainer.assignedSensitivityLabel)||void 0===t?void 0:t.sensitivityLabelId,assignmentMethod:null===(r=e.rosterContainer.assignedSensitivityLabel)||void 0===r?void 0:r.assignmentMethod},i=await this.ajaxClient.executeRequest(a,{method:n.PJ.Patch,headers:{[s.Lr.IfMatch]:e.rosterContainer.itemVersion,[s.Lr.ContentType]:s.Mq.Json},body:JSON.stringify(o),telemetryConfig:{apiName:fe.apiName,methodName:"setRosterSensitivityLabel"}});try{const e=await i.clone().json();if(null==e)throw new Error("No roster data returned");return new O.j(e.id,null,"")}catch(l){return Promise.reject(pe.g.generateAjaxClientError(i,l))}}async createGroupConversationThreadAsync(e){const t=pe.g.validateAjaxClientRequestParameters(e,["groupId"]);if(null!==t)return Promise.reject(t);const r="".concat(this._baseUrl,"groups/").concat(e.groupId,"/conversations"),a=e.newPost.toGraphSerializable(),o={topic:e.threadSubject.substring(0,200),threads:[{posts:[a]}]},i=await this.ajaxClient.executeRequest(r,{method:n.PJ.Post,body:JSON.stringify(o),headers:{[s.Lr.ContentType]:s.Mq.Json},telemetryConfig:this.getDefaultRequestTelemetryConfig("createGroupConversationThreadAsync")});try{var l;const e=await i.clone().json();if(null==(null===e||void 0===e||null===(l=e.threads)||void 0===l||null===(l=l[0])||void 0===l?void 0:l.id))throw new Error("No post response returned");return a.createdDateTime=ue()().toDate().toISOString(),v.L.builder.fromGraphPostResource(a,e.threads[0].id).withLocallyUniqueId().build()}catch(c){return Promise.reject(pe.g.generateAjaxClientError(i,c))}}async postReplyInGroupConversationThreadAsync(e){const t=pe.g.validateAjaxClientRequestParameters(e,["groupId","threadId"]);if(null!==t)return Promise.reject(t);const r="".concat(this._baseUrl,"groups/").concat(e.groupId,"/threads/").concat(e.threadId,"/reply"),a=e.newPost.toGraphSerializable();a.createdDateTime=ue()().toDate().toISOString();const o=h()(a.from);a.from=void 0,a.categories=void 0;const i={post:a};await this.ajaxClient.executeRequest(r,{method:n.PJ.Post,headers:{[s.Lr.ContentType]:s.Mq.Json},body:JSON.stringify(i),telemetryConfig:this.getDefaultRequestTelemetryConfig("PostReplyInGroupConversationThreadAsync")});const l=h()(a);return l.from=o,v.L.builder.fromGraphPostResource(l,e.threadId).withLocallyUniqueId().build()}joinGroupAsync(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}leaveGroupAsync(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}trackExperimentEvent(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}logNotificationTelemetry(e){return Promise.reject(pe.g.generateAjaxClientError(fe.notImplementedResponse,fe.notImplemented))}async createUploadSession(e){const t=pe.g.validateAjaxClientRequestParameters(e,["groupId","itemPath"]);if(null!==t)return Promise.reject(t);const r="".concat(this._baseUrl,"groups('").concat(e.groupId,"')/drive/root:/").concat(encodeURIComponent(e.itemPath),":/createUploadSession"),a=await this.ajaxClient.executeRequest(r,{method:n.PJ.Post,body:JSON.stringify({item:{"@microsoft.graph.conflictBehavior":"rename"}}),headers:{[s.Lr.ContentType]:s.Mq.Json},telemetryConfig:this.getDefaultRequestTelemetryConfig("createUploadSessionAsync")});try{const t=await a.clone().json();if(null==t)throw new Error("No response returned");return e.session=e.session.setProperty("uploadUrl",t.uploadUrl),e.session=e.session.setProperty("bytesSent",0),e.session=e.session.setProperty("expirationDateTime",t.expirationDateTime),e.session}catch(o){return Promise.reject(pe.g.generateAjaxClientError(a,o))}}async uploadBytesToSession(e){const t=e.uploadSession.uploadUrl,r=(0,ye.FI)(e.b64Data),a=await this.ajaxClient.executeRequest(t,{method:n.PJ.Put,headers:{[s.Lr.ContentRange]:(0,ye.X7)(e.initialByteIndex,e.finalByteIndex,e.totalSize),[s.Lr.ContentType]:s.Mq.OctetStream},body:r,telemetryConfig:this.getDefaultRequestTelemetryConfig("uploadBytesToSessionAsync")});try{var o,l,c;const t=await a.clone().json();if(null==t)throw new Error("No response returned");let r=null;S()(t.id)||(r=t.id);let n=null;S()(t.name)||(n=t.name);let s=null;null!=t.size&&(s=t.size);let u=e.uploadSession.expirationDateTime;null!=t.expirationDateTime&&(u=t.expirationDateTime);return i.z.builder.withPropertyBag({bytesSent:e.finalByteIndex+1,expirationDateTime:u,groupId:e.uploadSession.groupId,id:null!==(o=e.uploadSession.id)&&void 0!==o?o:me.o.generate(),itemId:r&&r!==e.uploadSession.itemId?r:e.uploadSession.itemId,itemName:n&&n!==e.uploadSession.itemName?n:null!==(l=e.uploadSession.itemName)&&void 0!==l?l:"",itemSize:s&&s!==e.uploadSession.itemSize?s:null!==(c=e.uploadSession.itemSize)&&void 0!==c?c:0,lastUploadRequestSucceeded:!0,uploadUrl:e.uploadSession.uploadUrl,name:e.uploadSession.name,webUrl:t.webUrl,nextExpectedRanges:t.nextExpectedRanges}).build()}catch(u){return Promise.reject(pe.g.generateAjaxClientError(a,u))}}async addUserToGroupMembers(e){const t="".concat(this._baseUrl,"groups/").concat(e.container.externalId,"/members/$ref"),r={"@odata.id":"https://".concat(o.B.clientSettings.graphHostName,"/").concat(this.v1BaseUrl,"users/").concat(e.userId)};await this.ajaxClient.executeRequest(t,{method:n.PJ.Post,body:JSON.stringify(r),headers:{[s.Lr.ContentType]:s.Mq.Json},telemetryConfig:this.getDefaultRequestTelemetryConfig("addUserToGroupMembers"),retryConfig:(0,ge.Vj)({maxRetryCount:0})})}async addUserToPlannerRosterMembers(e){const t="".concat(this.betaBaseUrl,"planner/rosters/").concat(e.container.externalId,"/members"),r={"@odata.type":k.U.PlannerRosterMember,userId:e.userId};await this.ajaxClient.executeRequest(t,{method:n.PJ.Post,telemetryConfig:this.getDefaultRequestTelemetryConfig("addUserToPlannerRosterMembers"),body:JSON.stringify(r),headers:{[s.Lr.ContentType]:s.Mq.Json},retryConfig:(0,ge.Vj)({maxRetryCount:0})})}getDefaultRequestTelemetryConfig(e){return{apiName:fe.apiName,methodName:e,requestHeadersToLog:this.loggableRequestHeaders,responseHeadersToLog:this.loggableResponseHeaders}}constructor(){super(...arguments),this.loggableRequestHeaders=[s.a8.ClientRequestId],this.loggableResponseHeaders=[s.Qu.RequestId,s.Qu.ClientRequestId,s.Qu.TCorrelationId],this.unifiedGroupTemplateId="62375ab9-6b52-47ed-826b-58e47e0e304b",this.unifiedGroupDisplayName="Group.Unified"}}fe.notImplemented="Not Implemented",fe.notImplementedResponse=new Response(fe.notImplemented,{status:501,statusText:fe.notImplemented}),fe.apiName="TaskServiceGraphOdataApi"},81704:(e,t,r)=>{r.d(t,{Vj:()=>l});var a=r(95783),n=r(34677),s=r.n(n),o=r(38752),i=r(98502);function l(e){return s()({maxRetryCount:o.B.clientSettings.RetrySettings.MaxRetryCount,maxRetryTimeoutInMiliseconds:o.B.clientSettings.RetrySettings.MaxRetryTimeout,delayOnRetryInMiliseconds:o.B.clientSettings.RetrySettings.RetryDelay,retryCheck:c},e)}async function c(e,t,r){return(null==e.method||e.method.toUpperCase()===a.PJ.Get)&&i.g.isRetryableResponse(t,r)}},30035:(e,t,r)=>{async function a(e){return new Promise((t=>setTimeout(t,e)))}r.d(t,{y:()=>a})},61739:(e,t,r)=>{r.d(t,{Cx:()=>s,Ny:()=>o,n0:()=>i});var a=r(54320),n=r.n(a);function s(e){let t="";if(!n()(e))try{t=new URLSearchParams(new URL(e).search).get("$skiptoken")||""}catch(r){}return t}function o(e,t){return"startswith(".concat(e,", '").concat(encodeURIComponent(t).replace(/'/g,"''"),"')")}function i(e){const t="https://graph.microsoft.com/";return e&&0===e.indexOf(t)&&(e=e.substring(28)),e}},26796:(e,t,r)=>{r.d(t,{z:()=>s});var a=r(57718),n=function(){function e(){this.bytesSent=0,this.groupId="",this.id=a.cM(),this.itemName="",this.itemSize=0,this.itemId="",this.lastUploadRequestSucceeded=!1,this.uploadUrl="",this.name="",this.webUrl="",this.nextExpectedRanges=void 0}return e.prototype.build=function(){return new s(this)},e.prototype.withPropertyBag=function(e){return this.bytesSent=e.bytesSent||this.bytesSent,this.expirationDateTime=e.expirationDateTime||this.expirationDateTime,this.groupId=e.groupId||this.groupId,this.id=e.id||this.id,this.itemId=e.itemId||this.itemId,this.itemName=e.itemName||this.itemName,this.itemSize=e.itemSize||this.itemSize,this.lastUploadRequestSucceeded=null!=e.lastUploadRequestSucceeded?e.lastUploadRequestSucceeded:this.lastUploadRequestSucceeded,this.uploadUrl=e.uploadUrl||this.uploadUrl,this.name=e.name||this.name,this.webUrl=e.webUrl||this.webUrl,this.nextExpectedRanges=e.nextExpectedRanges||this.nextExpectedRanges,this},e.prototype.withDefaultValues=function(){return this.id="DriveItemUploadSessionId",this.bytesSent=0,this.groupId="GroupId",this.itemId="itemId",this.itemName="sampleFile.txt",this.itemSize=28,this.uploadUrl="UploadURL",this.name="sampleFile.txt",this.expirationDateTime=new Date("2020-09-02"),this.webUrl="https://contoso.com/sites/group/sampleFile.txt",this.nextExpectedRanges=["26-"],this},e}(),s=function(){function e(e){this.bytesSent=e.bytesSent,this.expirationDateTime=e.expirationDateTime,this.groupId=e.groupId,this.id=e.id,this.itemId=e.itemId,this.itemName=e.itemName,this.itemSize=e.itemSize,this.lastUploadRequestSucceeded=e.lastUploadRequestSucceeded,this.uploadUrl=e.uploadUrl,this.name=e.name,this.webUrl=e.webUrl,this.nextExpectedRanges=e.nextExpectedRanges}return Object.defineProperty(e,"builder",{get:function(){return new n},enumerable:!1,configurable:!0}),e.prototype.getClone=function(){return e.builder.withPropertyBag({bytesSent:this.bytesSent,expirationDateTime:this.expirationDateTime,groupId:this.groupId,id:this.id,itemId:this.itemId,itemName:this.itemName||"",itemSize:this.itemSize||0,lastUploadRequestSucceeded:this.lastUploadRequestSucceeded,uploadUrl:this.uploadUrl,name:this.name,webUrl:this.webUrl,nextExpectedRanges:this.nextExpectedRanges}).build()},e.prototype.setProperty=function(e,t){if("id"===e)throw new Error("ReadOnlyException: "+e);var r=this.getClone();return r[e]=t,r},e}()},57718:(e,t,r)=>{function a(e){for(var t="";t.length<e;){var r=16*Math.random();t+=(r|=0).toString(16)}return t}r.d(t,{cM:()=>n});function n(){var e=[];e.push(a(8)),e.push(a(4));var t="4"+a(3);e.push(t);var r=a(4),n=parseInt(r[0],16);return n&=3,r=(n|=8).toString(16)+r.substr(1),e.push(r),e.push(a(12)),e.join("-")}}}]);
//# sourceMappingURL=tsgraphodataapi.170c3b77.chunk.js.map