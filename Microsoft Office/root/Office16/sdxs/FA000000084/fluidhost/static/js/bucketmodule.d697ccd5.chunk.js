"use strict";(self.webpackChunkfluidhost=self.webpackChunkfluidhost||[]).push([[10041],{30220:(e,t,r)=>{r.r(t),r.d(t,{BucketModule:()=>f});var c=r(1207),s=r(32512);class o extends s.v{constructor(e,t,r){super(o.actionType,e,t,r)}}o.actionType="PLW_GET_BUCKETSFORPLAN_FAILED";var i=r(31353);class n extends s.v{constructor(e,t,r,c){super(n.actionType,e,t,r),this.bucketId=c}}n.actionType="PLW_GET_BUCKET_FAILED";var a=r(1623),u=r(79670),l=r(514),g=r(25744),d=r(38227),h=r(15765),k=r(87450),p=r(23821),B=r(46219),v=r(33287),b=r(96891),w=r(64805),A=r(74844),P=r(54320),I=r.n(P),T=r(9962),y=r(91246),F=r(98502),L=r(82841);class f extends w.J{get name(){return"BucketModule"}async fetchBucketsForPlanAsync(e,t){this.loggers.traceLogger.logTrace(507896991,A.k.Verbose,"Fetching Buckets For Plan [PlanId=".concat(e,"][Force=").concat(null!==t&&void 0!==t&&t,"]"));let r=e=>{const t=this.stores.bucketStore.getBucketsForPlan(e.planId);return I()(t)?null:t},s=this.getCurrentViewIds();t&&(r=void 0,s=void 0);try{const o=await this.webApiProviders.taskService(),i=await o.getBucketsForPlanAsync({planId:e},r,s);return this.dispatcher.dispatchAction(new c.z(e,i)),this.loggers.traceLogger.logTrace(507896990,A.k.Verbose,"Fetching Buckets For Plan - Success [PlanId=".concat(e,"][Force=").concat(null!==t&&void 0!==t&&t,"]")),i}catch(l){var i,n,a,u;const r=l;return this.dispatcher.dispatchAction(new o(r.response,null!==(i=null===(n=r.response)||void 0===n?void 0:n.statusText)&&void 0!==i?i:"",null!==(a=null===(u=r.error)||void 0===u?void 0:u.message)&&void 0!==a?a:"")),this.loggers.traceLogger.logTrace(507896989,A.k.Warning,"Fetching Buckets For Plan - Fail [PlanId=".concat(e,"][Force=").concat(null!==t&&void 0!==t&&t,"]").concat((0,L.s8)(r))),Promise.reject(r)}}async fetchBucketAsync(e,t){this.loggers.traceLogger.logTrace(507896988,A.k.Verbose,"Fetching Bucket [BucketId=".concat(e,"][Force=").concat(null!==t&&void 0!==t&&t,"]"));let r=e=>this.stores.bucketStore.getBucket(e.bucketId),c=this.getCurrentViewIds();t&&(r=void 0,c=void 0);try{const s=await this.webApiProviders.taskService(),o=await s.getBucketAsync({bucketId:e},r,c);return this.dispatcher.dispatchAction(new i.g(o.bucket)),this.loggers.traceLogger.logTrace(507896987,A.k.Verbose,"Fetching Bucket - Success [BucketId=".concat(e,"][Force=").concat(null!==t&&void 0!==t&&t,"]")),o.bucket}catch(l){var s,o,a,u;const r=l;return this.dispatcher.dispatchAction(new n(r.response,null!==(s=null===(o=r.response)||void 0===o?void 0:o.statusText)&&void 0!==s?s:"",null!==(a=null===(u=r.error)||void 0===u?void 0:u.message)&&void 0!==a?a:"",e)),this.loggers.traceLogger.logTrace(507896986,A.k.Warning,"Fetching Bucket - Fail [BucketId=".concat(e,"][Force=").concat(null!==t&&void 0!==t&&t,"] ").concat((0,L.s8)(r))),Promise.reject(r)}}async createBucketAsync(e){if(this.loggers.traceLogger.logTrace(507896985,A.k.Verbose,"Creating Bucket [PlanId=".concat(e.planId,"]")),I()(e.title.trim())){const t="InvalidArgumentException: Whitespaces are not allowed";return this.loggers.traceLogger.logTrace(507896984,A.k.Warning,"Creating Bucket - Fail [PlanId=".concat(e.planId,"][Error=").concat(t,"]")),Promise.reject(F.g.generateAjaxClientError(null,t))}this.dispatcher.dispatchAction(new a.t(e));try{const t=await this.webApiProviders.taskService(),r=await t.createBucketAsync({bucketInfo:e});return this.dispatcher.dispatchAction(new u.G(r.bucket,e.id)),this.loggers.traceLogger.logTrace(507896983,A.k.Verbose,"Creating Bucket - Success [PlanId=".concat(e.planId,"]")),this.loggers.usageLogger.logData(this.name,b.M.CreateBucket),r.bucket}catch(o){var t,r,c,s;const i=o;return this.dispatcher.dispatchAction(new l.g(e,i.response,null!==(t=null===(r=i.response)||void 0===r?void 0:r.statusText)&&void 0!==t?t:"",null!==(c=null===(s=i.error)||void 0===s?void 0:s.message)&&void 0!==c?c:"")),this.loggers.traceLogger.logTrace(507896982,A.k.Warning,"Creating Bucket - Fail [PlanId=".concat(e.planId,"]").concat((0,L.s8)(i))),Promise.reject(i)}}async deleteBucketAsync(e,t){this.loggers.traceLogger.logTrace(507896981,A.k.Verbose,"Deleting Bucket [BucketId=".concat(e,"][Version=").concat(t,"]"));const r=this.stores.bucketStore.getBucket(e);if(this.dispatcher.dispatchAction(new g.e(e)),null==r)return Promise.resolve();try{const r=await this.webApiProviders.taskService();return await r.deleteBucketAsync({bucketId:e,itemVersion:t}),this.dispatcher.dispatchAction(new d.R(e)),void this.loggers.traceLogger.logTrace(507896980,A.k.Verbose,"Deleting Bucket - Success [BucketId=".concat(e,"][Version=").concat(t,"]"))}catch(n){var c,s,o,i;const r=n;return this.dispatcher.dispatchAction(new h.V(e,r.response,null!==(c=null===(s=r.response)||void 0===s?void 0:s.statusText)&&void 0!==c?c:"",null!==(o=null===(i=r.error)||void 0===i?void 0:i.message)&&void 0!==o?o:"")),this.loggers.traceLogger.logTrace(507896979,A.k.Warning,"Deleting Bucket - Failure [BucketId=".concat(e,"][Version=").concat(t,"]").concat((0,L.s8)(r))),Promise.reject(r)}}async updateBucketAsync(e,t){this.loggers.traceLogger.logTrace(507896978,A.k.Verbose,"Updating Bucket [BucketId=".concat(e.id,"]"));const r=e.getDiff(t);if(this.logUpdateBucketUsage(r),I()(r))return this.loggers.traceLogger.logTrace(507896977,A.k.Verbose,"Updating Bucket - Success No-op [BucketId=".concat(e.id,"]")),Promise.resolve(v.a.builder.withBucket(t).build());const c=y.o.generate();this.dispatcher.dispatchAction(new k.A(t,c));const s=t=>{const c=this.stores.bucketStore.getBucketWithoutPendingUpdates(t.originalBucket.id);if(null==c)throw this.loggers.traceLogger.logTrace(507896976,A.k.Warning,"Updating Bucket - Fail [BucketId=".concat(e.id,'][Error="Original bucket not found in store"]')),F.g.generateAjaxClientError(null,new T.m("originalStoreBucket","bucketStore"));const s=c.applyDiffs(r);return{originalBucket:c,updatedBucket:s}};try{const r=await this.webApiProviders.taskService(),o=await r.updateBucketAsync({originalBucket:e,updatedBucket:t},s);return this.dispatcher.dispatchAction(new p.z(o.bucket,c)),this.loggers.traceLogger.logTrace(507896975,A.k.Verbose,"Updating Bucket - Success [BucketId=".concat(e.id,"]")),o}catch(u){var o,i,n,a;const t=u;return this.dispatcher.dispatchAction(new B.T(e,c,t.response,null!==(o=null===(i=t.response)||void 0===i?void 0:i.statusText)&&void 0!==o?o:"",null!==(n=null===(a=t.error)||void 0===a?void 0:a.message)&&void 0!==n?n:"")),this.loggers.traceLogger.logTrace(507896974,A.k.Warning,"Updating Bucket - Fail [BucketId=".concat(e.id,"]").concat((0,L.s8)(t))),Promise.reject(t)}}logUpdateBucketUsage(e){e.title&&this.loggers.usageLogger.logData(b.M.BucketActionCreator,b.M.BucketTitleUpdated),e.orderHint&&this.loggers.usageLogger.logData(b.M.BucketActionCreator,b.M.BucketOrderHintUpdated)}}},64805:(e,t,r)=>{r.d(t,{J:()=>s});class c{get clientSettings(){return this.clientSettingsProvider()}constructor(e,t,r){this.dispatcher=e,this.clientSettingsProvider=t,this.loggers=r}}class s extends c{getCurrentViewIds(){const e=this.stores.appContextStore.getCurrentViewId();return e?[e]:void 0}constructor(e,t,r,c,s){super(e,c,s),this.webApiProviders=t,this.stores=r}}},33287:(e,t,r)=>{r.d(t,{a:()=>o});var c=r(8403);class s{build(){return new o(this)}fromBucketEntityGroupResource(e){return this.withPropertyBag({bucket:c.f.builder.fromWebResource(e.Bucket).build()})}fromGraphBucketResourceTypes(e){return this.withPropertyBag({bucket:c.f.builder.fromGraphResource(e).build()})}withPropertyBag(e){return this.bucket=e.bucket||this.bucket,this}withBucket(e){return this.bucket=e,this}withDefaultValues(){return this.withPropertyBag({bucket:c.f.builder.build()})}}class o{static get builder(){return new s}get id(){return this.bucket.id}toWebSerializable(){return{Bucket:this.bucket.toWebSerializable()}}constructor(e){this.bucket=e.bucket}}}}]);
//# sourceMappingURL=bucketmodule.d697ccd5.chunk.js.map